from crewai import Task, Crew, Process
from agents import planner, initial_researcher, sub_topic_generator, detailed_researcher, aggregator
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Task 1: Generate Research Questions
task_generate_research_questions = Task(
    description="Generate a set of 3 research questions about {topic}. To do this, you will need to do one search using tavily tool and one search using google tool. Review the search results to give you context allowing you to generate a comprehensive set of 3 research questions. Once you have generated the questions, return them as a list of strings. Do nothing else.",
    expected_output="List of 3 structured research questions as strings.",
    agent=planner,
    async_execution=False,
)

# Task 2: Initial Data Collection
task_initial_data_collection = Task(
    description="Take the research questions generated by previous task. Use each queries to search using tavily tool. Generate a combined bibliography recommendation report for the research question after reviewing the Tavily results. Include only relevant sources, providing a detailed analysis of each in Markdown format, highlighting their relevance and reliability. Do nothing else",
    expected_output="Markdown report of bibliography recommendations, at least 500 words, with all sources hyperlinked.",
    agent=initial_researcher,
    async_execution=False,
    inputs={'research_questions': task_generate_research_questions.output}
)

# Task 3: Generate Sub-topics
task_generate_subtopics = Task(
    description="From the bibliography reports, extract up to 5 subtopics related to the main topic. Ensure no duplicates, and order them by relevance.",
    expected_output="Markdown formatted list of up to 5 relevant subtopics.",
    agent=sub_topic_generator,
    async_execution=False,
    inputs={'bibliography': task_initial_data_collection.output}
)

# Task 4: Detailed Research on Sub-topics
task_detailed_research = Task(
    description="Conduct detailed research on each sub-topic using the Tavily tool. Structure the content in Markdown focusing on in-depth analysis relevant to the main topic, limited to 5 sub-sections. Include hyperlinked sources both within the text and as references at the end.",
    expected_output="Markdown formatted detailed findings on each sub-topic, formatted for inclusion in a larger report without intros or conclusions.",
    agent=detailed_researcher,
    async_execution=False,
    inputs={'subtopics': task_generate_subtopics.output}
)

# Task 5: Compile and Aggregate Findings
task_compile_final_report = Task(
    description="Synthesize all research findings into a comprehensive final report in Markdown, focusing on actionable insights and structured analysis. Include hyperlinked sources both within the text and as references at the end.",
    expected_output="In-depth and well-structured final research report in Markdown format, minimum 2000 words excluding citations and references",
    agent=aggregator,
    async_execution=False,
    inputs={'detailed_research': task_detailed_research.output}
)

# Forming the Crew
research_crew = Crew(
    agents=[planner, initial_researcher, sub_topic_generator, detailed_researcher, aggregator],
    tasks=[
        task_generate_research_questions,
        task_initial_data_collection,
        task_generate_subtopics,
        task_detailed_research,
        task_compile_final_report
    ],
    max_rpm=27,
    process=Process.sequential  # Sequential execution ensures each task is completed before the next starts
)

input_topic = input("Please enter the research topic: ")
try:
    result = research_crew.kickoff(inputs={'topic': input_topic})
    print("Research Output:", result)
    print(research_crew.usage_metrics)
except Exception as e:
    logger.exception(f"Error during research process: {e}")