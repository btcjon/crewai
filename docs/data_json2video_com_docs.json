[{"date_scraped_timestamp":1714855976305,"host":"json2video.com","page_title":"API Specification - JSON2Video.com","text":"SchemasMovie schemaObject defining the movie to be renderedcachebooleanUse the cached version of the movie if its availabledefault:truecommentstringUsed for adding your commentsdraftbooleanDraft movies include a watermark. Check your plan how many draft and final movies you havedefault:trueelementsarray of any of these schemas: Video, Image, Text, HTML, Component, Template, Audio, Voice, Audiogram, Subtitlesexportsarray of this object:You can define different types of exports for your movie. Check the documentation for more informationheightintegerHeight of the movie. Only applicable if resolution is set to customdefault:360minimum value:>=50maximum value:<=3840example value:360idstringMovie ID string. It must be unique per projectdefault:@randomStringqualitystringQuality of the final rendered movie. Use it for speeding up the rendering process. low is the lowest quality, high is the highest qualityallowed values:lowmediumhighdefault:highresolutionstringSet the movie size based on common use cases. Use custom to set a custom size with the width and height propertiesallowed values:sdhdfull-hdsquaredinstagram-storyinstagram-feedtwitter-landscapetwitter-portraitcustomdefault:customscenesarray of ScenerequiredwidthintegerWidth of the movie. Only applicable if resolution is set to customdefault:640minimum value:>=50maximum value:<=3840example value:640Example of movie schema{\n \"comment\": \"MyProject\",\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://example.com/path/to/my/video.mp4\"\n }\n ]\n }\n ]\n}Scene schemabackground-colorstringA hexadecimal representation of a color or 'transparent'default:#000000example value:#FF0000cachebooleanUse the cached version of the scene if its availabledefault:truecommentstringUsed for adding your commentsdurationnumberfloatSets the scene duration in seconds. A value of -1 means that the scene lasts enough to contain all its elementsdefault:-1elementsarray of any of these schemas: Video, Image, Text, HTML, Component, Audio, Voice, Audiogram, SubtitlesidstringID of the scenedefault:@randomStringtransitionobjectdurationnumberfloatDuration of the transition in secondsexample value:1.5stylestringallowed values:fadewipeleftwiperightwipeupwipedownslideleftsliderightslideupslidedowncirclecroprectcropdistancefadeblackfadewhiteradialsmoothleftsmoothrightsmoothupsmoothdowncircleopencircleclosevertopenvertclosehorzopenhorzclosedissolvepixelizediagtldiagtrdiagbldiagbrhlslicehrslicevuslicevdslicehblurfadegrayswipetlwipetrwipeblwipebrsqueezehsqueezevdefault:fadeexample value:circleopenVideo schemacachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsechroma-keyobjectAllows to define a color (or a range of colors) that will be converted to transparentcolorstringrequiredSet the color for which alpha will be set to 0 (full transparency)example value:#00b140toleranceintegerMakes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvasdefault:25minimum value:>=1maximum value:<=100commentstringUsed for adding your commentscorrectionobjectAllows to adjust the contrast, brightness, saturation and gamma of the elementbrightnessnumberAdjust the brightnessdefault:0minimum value:>=-1maximum value:<=1contrastnumberAdjust the contrastdefault:1minimum value:>=-1000maximum value:<=1000gammanumberAdjust the gammadefault:1minimum value:>=0.1maximum value:<=10saturationnumberAdjust the saturationdefault:1minimum value:>=0maximum value:<=3cropobjectCrops the elementheightintegerrequiredSets the height of the cropingwidthintegerrequiredSets the width of the cropingxintegerSets the left point of cropingdefault:0yintegerSets the top point of cropingdefault:0durationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0flip-horizontalbooleanFlips the element horizontallydefault:falseflip-verticalbooleanFlips the element verticallydefault:falseheightintegerSets the height of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1idstringID of the elementdefault:@randomStringloopintegerSets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.minimum value:>=-1example value:-1mutedbooleanMutes the audiodefault:falsepanstringPans the element to the specified direction. If zoom property is not specified, the effect is a non-zooming panallowed values:lefttoprightbottomtop-lefttop-rightbottom-leftbottom-rightpan-distancenumberfloatPans the element to the specified distancedefault:0.1minimum value:>=0.01maximum value:<=0.5positionstringSets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' propertiesallowed values:top-lefttop-rightbottom-rightbottom-leftcenter-centercustomdefault:customrotateobjectanglenumberrequiredSets the angle of rotationdefault:0minimum value:>=-360maximum value:<=360speednumberSets the time it takes to rotate the provided angle. A zero value means no movementdefault:0minimum value:>=0scaleobjectThis property is deprecated. Use 'width' and 'height' insteadheightintegerSets the height for scaling the elementdefault:-1minimum value:>=-1widthintegerSets the width for scaling the elementdefault:-1minimum value:>=-1seeknumberfloatSeek to the specified time in seconds relative to the begining of the asset. Use negative values to seek backwardsdefault:0srcstringuriURL to the asset file. Videos can be in MP4, MKV, MOV but MP4 is recommended.startnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0volumenumberVolume gain of the audio. A value of 1 means no gain. Higher values increase the volume. Values lower than 1 decrease the volumedefault:1minimum value:>=0maximum value:<=10widthintegerSets the width of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1xnumberintegerSets the horizontal position of the element in the scene. The value 0 is on the left sidedefault:0ynumberintegerSets the vertical position of the element in the scene. The value 0 is on the top sidedefault:0z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3zoomintegerZooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the pan property to set the focus point of the zoomingminimum value:>=-100maximum value:<=100Image schemacachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsechroma-keyobjectAllows to define a color (or a range of colors) that will be converted to transparentcolorstringrequiredSet the color for which alpha will be set to 0 (full transparency)example value:#00b140toleranceintegerMakes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvasdefault:25minimum value:>=1maximum value:<=100commentstringUsed for adding your commentscorrectionobjectAllows to adjust the contrast, brightness, saturation and gamma of the elementbrightnessnumberAdjust the brightnessdefault:0minimum value:>=-1maximum value:<=1contrastnumberAdjust the contrastdefault:1minimum value:>=-1000maximum value:<=1000gammanumberAdjust the gammadefault:1minimum value:>=0.1maximum value:<=10saturationnumberAdjust the saturationdefault:1minimum value:>=0maximum value:<=3cropobjectCrops the elementheightintegerrequiredSets the height of the cropingwidthintegerrequiredSets the width of the cropingxintegerSets the left point of cropingdefault:0yintegerSets the top point of cropingdefault:0durationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0flip-horizontalbooleanFlips the element horizontallydefault:falseflip-verticalbooleanFlips the element verticallydefault:falseheightintegerSets the height of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1idstringID of the elementdefault:@randomStringpanstringPans the element to the specified direction. If zoom property is not specified, the effect is a non-zooming panallowed values:lefttoprightbottomtop-lefttop-rightbottom-leftbottom-rightpan-distancenumberfloatPans the element to the specified distancedefault:0.1minimum value:>=0.01maximum value:<=0.5positionstringSets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' propertiesallowed values:top-lefttop-rightbottom-rightbottom-leftcenter-centercustomdefault:customrotateobjectanglenumberrequiredSets the angle of rotationdefault:0minimum value:>=-360maximum value:<=360speednumberSets the time it takes to rotate the provided angle. A zero value means no movementdefault:0minimum value:>=0scaleobjectThis property is deprecated. Use 'width' and 'height' insteadheightintegerSets the height for scaling the elementdefault:-1minimum value:>=-1widthintegerSets the width for scaling the elementdefault:-1minimum value:>=-1srcstringuriURL to the asset file. Images can be in JPG, PNG, GIF or any common image format.startnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0widthintegerSets the width of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1xnumberintegerSets the horizontal position of the element in the scene. The value 0 is on the left sidedefault:0ynumberintegerSets the vertical position of the element in the scene. The value 0 is on the top sidedefault:0z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3zoomintegerZooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the pan property to set the focus point of the zoomingminimum value:>=-100maximum value:<=100Text schemaCreates a text element of a given stylecachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsechroma-keyobjectAllows to define a color (or a range of colors) that will be converted to transparentcolorstringrequiredSet the color for which alpha will be set to 0 (full transparency)example value:#00b140toleranceintegerMakes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvasdefault:25minimum value:>=1maximum value:<=100commentstringUsed for adding your commentscorrectionobjectAllows to adjust the contrast, brightness, saturation and gamma of the elementbrightnessnumberAdjust the brightnessdefault:0minimum value:>=-1maximum value:<=1contrastnumberAdjust the contrastdefault:1minimum value:>=-1000maximum value:<=1000gammanumberAdjust the gammadefault:1minimum value:>=0.1maximum value:<=10saturationnumberAdjust the saturationdefault:1minimum value:>=0maximum value:<=3cropobjectCrops the elementheightintegerrequiredSets the height of the cropingwidthintegerrequiredSets the width of the cropingxintegerSets the left point of cropingdefault:0yintegerSets the top point of cropingdefault:0durationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0flip-horizontalbooleanFlips the element horizontallydefault:falseflip-verticalbooleanFlips the element verticallydefault:falseheightintegerSets the height of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1idstringID of the elementdefault:@randomStringpanstringPans the element to the specified direction. If zoom property is not specified, the effect is a non-zooming panallowed values:lefttoprightbottomtop-lefttop-rightbottom-leftbottom-rightpan-distancenumberfloatPans the element to the specified distancedefault:0.1minimum value:>=0.01maximum value:<=0.5positionstringSets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' propertiesallowed values:top-lefttop-rightbottom-rightbottom-leftcenter-centercustomdefault:customrotateobjectanglenumberrequiredSets the angle of rotationdefault:0minimum value:>=-360maximum value:<=360speednumberSets the time it takes to rotate the provided angle. A zero value means no movementdefault:0minimum value:>=0scaleobjectThis property is deprecated. Use 'width' and 'height' insteadheightintegerSets the height for scaling the elementdefault:-1minimum value:>=-1widthintegerSets the width for scaling the elementdefault:-1minimum value:>=-1settingsobjectText formatting settings. In general, these are CSS properties such as font-size, colour or font-weight. See the styles to confirm which properties are available.default:{}example value:{\n \"font-size\": \"60px\",\n \"color\": \"#FF0000\"\n}startnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0stylestringdefault:001example value:003textstringrequiredText to be printed. The text string does not accept HTML formatting.example value:Lorem ipsum dolor sit ametwidthintegerSets the width of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1xnumberintegerSets the horizontal position of the element in the scene. The value 0 is on the left sidedefault:0ynumberintegerSets the vertical position of the element in the scene. The value 0 is on the top sidedefault:0z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3zoomintegerZooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the pan property to set the focus point of the zoomingminimum value:>=-100maximum value:<=100Component schemaCreates an element based on the specified featurecachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsechroma-keyobjectAllows to define a color (or a range of colors) that will be converted to transparentcolorstringrequiredSet the color for which alpha will be set to 0 (full transparency)example value:#00b140toleranceintegerMakes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvasdefault:25minimum value:>=1maximum value:<=100commentstringUsed for adding your commentscomponentstringrequiredID of the Component element. Check all available components in the libraryexample value:basic/001correctionobjectAllows to adjust the contrast, brightness, saturation and gamma of the elementbrightnessnumberAdjust the brightnessdefault:0minimum value:>=-1maximum value:<=1contrastnumberAdjust the contrastdefault:1minimum value:>=-1000maximum value:<=1000gammanumberAdjust the gammadefault:1minimum value:>=0.1maximum value:<=10saturationnumberAdjust the saturationdefault:1minimum value:>=0maximum value:<=3cropobjectCrops the elementheightintegerrequiredSets the height of the cropingwidthintegerrequiredSets the width of the cropingxintegerSets the left point of cropingdefault:0yintegerSets the top point of cropingdefault:0durationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0flip-horizontalbooleanFlips the element horizontallydefault:falseflip-verticalbooleanFlips the element verticallydefault:falseheightintegerSets the height of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1idstringID of the elementdefault:@randomStringpanstringPans the element to the specified direction. If zoom property is not specified, the effect is a non-zooming panallowed values:lefttoprightbottomtop-lefttop-rightbottom-leftbottom-rightpan-distancenumberfloatPans the element to the specified distancedefault:0.1minimum value:>=0.01maximum value:<=0.5positionstringSets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' propertiesallowed values:top-lefttop-rightbottom-rightbottom-leftcenter-centercustomdefault:customrotateobjectanglenumberrequiredSets the angle of rotationdefault:0minimum value:>=-360maximum value:<=360speednumberSets the time it takes to rotate the provided angle. A zero value means no movementdefault:0minimum value:>=0scaleobjectThis property is deprecated. Use 'width' and 'height' insteadheightintegerSets the height for scaling the elementdefault:-1minimum value:>=-1widthintegerSets the width for scaling the elementdefault:-1minimum value:>=-1settingsobjectSettings to be passed to the componentstartnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0widthintegerSets the width of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1xnumberintegerSets the horizontal position of the element in the scene. The value 0 is on the left sidedefault:0ynumberintegerSets the vertical position of the element in the scene. The value 0 is on the top sidedefault:0z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3zoomintegerZooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the pan property to set the focus point of the zoomingminimum value:>=-100maximum value:<=100HTML schemaCreates a video recording or a screenshot of the provided HTML snippetcachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsechroma-keyobjectAllows to define a color (or a range of colors) that will be converted to transparentcolorstringrequiredSet the color for which alpha will be set to 0 (full transparency)example value:#00b140toleranceintegerMakes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvasdefault:25minimum value:>=1maximum value:<=100commentstringUsed for adding your commentscorrectionobjectAllows to adjust the contrast, brightness, saturation and gamma of the elementbrightnessnumberAdjust the brightnessdefault:0minimum value:>=-1maximum value:<=1contrastnumberAdjust the contrastdefault:1minimum value:>=-1000maximum value:<=1000gammanumberAdjust the gammadefault:1minimum value:>=0.1maximum value:<=10saturationnumberAdjust the saturationdefault:1minimum value:>=0maximum value:<=3cropobjectCrops the elementheightintegerrequiredSets the height of the cropingwidthintegerrequiredSets the width of the cropingxintegerSets the left point of cropingdefault:0yintegerSets the top point of cropingdefault:0durationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0flip-horizontalbooleanFlips the element horizontallydefault:falseflip-verticalbooleanFlips the element verticallydefault:falseheightintegerSets the height of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1htmlstringrequiredHTML snippet to render. Compatible with HTML5, CSS3 and Javascriptexample value:<h1>Hello world</h1>idstringID of the elementdefault:@randomStringpanstringPans the element to the specified direction. If zoom property is not specified, the effect is a non-zooming panallowed values:lefttoprightbottomtop-lefttop-rightbottom-leftbottom-rightpan-distancenumberfloatPans the element to the specified distancedefault:0.1minimum value:>=0.01maximum value:<=0.5positionstringSets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' propertiesallowed values:top-lefttop-rightbottom-rightbottom-leftcenter-centercustomdefault:customrotateobjectanglenumberrequiredSets the angle of rotationdefault:0minimum value:>=-360maximum value:<=360speednumberSets the time it takes to rotate the provided angle. A zero value means no movementdefault:0minimum value:>=0scaleobjectThis property is deprecated. Use 'width' and 'height' insteadheightintegerSets the height for scaling the elementdefault:-1minimum value:>=-1widthintegerSets the width for scaling the elementdefault:-1minimum value:>=-1startnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0tailwindcssbooleanEnables usage of TailwindCSS for the HTML snippetdefault:falseexample value:truewidthintegerSets the width of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1xnumberintegerSets the horizontal position of the element in the scene. The value 0 is on the left sidedefault:0ynumberintegerSets the vertical position of the element in the scene. The value 0 is on the top sidedefault:0z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3zoomintegerZooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the pan property to set the focus point of the zoomingminimum value:>=-100maximum value:<=100Audio schemacachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsecommentstringUsed for adding your commentsdurationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0idstringID of the elementdefault:@randomStringloopintegerSets the number of loops the video to play. Use -1 for an infinite loop. The default value of 1 plays the video just once.minimum value:>=-1example value:-1mutedbooleanMutes the audiodefault:falseseeknumberfloatSeek to the specified time in seconds relative to the begining of the asset. Use negative values to seek backwardsdefault:0srcstringuriURL to the asset file. Audios can be in MP3, WAV or any common audio format.startnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0volumenumberVolume gain of the audio. A value of 1 means no gain. Higher values increase the volume. Values lower than 1 decrease the volumedefault:1minimum value:>=0maximum value:<=10z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3Voice schemaCreates a voice audio element from the provided textcachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsecommentstringUsed for adding your commentsdurationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0idstringID of the elementdefault:@randomStringmutedbooleanMutes the audiodefault:falsestartnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0textstringrequiredThe sentence or sentences to be converted to voice audiovoicestringdefault:en-GB-LibbyNeuralvolumenumberVolume gain of the audio. A value of 1 means no gain. Higher values increase the volume. Values lower than 1 decrease the volumedefault:1minimum value:>=0maximum value:<=10z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3Audiogram schemaVisualizes the audio of the scene or movie as an audiogramamplitudenumberfloatRelative amplitude of the audiogramdefault:5minimum value:>=0maximum value:<=10cachebooleanbooleanUse the cached version of the element if its availabledefault:trueexample value:falsechroma-keyobjectAllows to define a color (or a range of colors) that will be converted to transparentcolorstringrequiredSet the color for which alpha will be set to 0 (full transparency)example value:#00b140toleranceintegerMakes the selection more or less sensitive to changes in color. A value of 1 will select only the provided color. A value of 100 will select all colors, so the full canvasdefault:25minimum value:>=1maximum value:<=100colorstringColor of the audiogram waves in hexadecimal formatcommentstringUsed for adding your commentscorrectionobjectAllows to adjust the contrast, brightness, saturation and gamma of the elementbrightnessnumberAdjust the brightnessdefault:0minimum value:>=-1maximum value:<=1contrastnumberAdjust the contrastdefault:1minimum value:>=-1000maximum value:<=1000gammanumberAdjust the gammadefault:1minimum value:>=0.1maximum value:<=10saturationnumberAdjust the saturationdefault:1minimum value:>=0maximum value:<=3cropobjectCrops the elementheightintegerrequiredSets the height of the cropingwidthintegerrequiredSets the width of the cropingxintegerSets the left point of cropingdefault:0yintegerSets the top point of cropingdefault:0durationnumberfloatElement's duration in seconds. A value of -1 auto calculates the duration based on the asset intrinsic length or the scene duration. A value of -2 sets the element duration to the parent scene or elementdefault:-1example value:7.3extra-timenumberfloatElement's time span added after the playback.default:0example value:0.5fade-innumberfloatAdds a fade in effect to the element. Value in seconds.minimum value:>=0fade-outnumberfloatAdds a fade out effect to the element. Value in seconds.minimum value:>=0flip-horizontalbooleanFlips the element horizontallydefault:falseflip-verticalbooleanFlips the element verticallydefault:falseheightintegerSets the height of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1idstringID of the elementdefault:@randomStringopacitynumberfloatOpacity of the audiogramdefault:0.5minimum value:>=0maximum value:<=1panstringPans the element to the specified direction. If zoom property is not specified, the effect is a non-zooming panallowed values:lefttoprightbottomtop-lefttop-rightbottom-leftbottom-rightpan-distancenumberfloatPans the element to the specified distancedefault:0.1minimum value:>=0.01maximum value:<=0.5positionstringSets the element position in the scene. A value of 'custom' sets a custom position based on the provided 'x' and 'y' propertiesallowed values:top-lefttop-rightbottom-rightbottom-leftcenter-centercustomdefault:customrotateobjectanglenumberrequiredSets the angle of rotationdefault:0minimum value:>=-360maximum value:<=360speednumberSets the time it takes to rotate the provided angle. A zero value means no movementdefault:0minimum value:>=0scaleobjectThis property is deprecated. Use 'width' and 'height' insteadheightintegerSets the height for scaling the elementdefault:-1minimum value:>=-1widthintegerSets the width for scaling the elementdefault:-1minimum value:>=-1startnumberfloatElement's starting time in seconds relative to the container scene or the movie if the element is in the Movie's elements array.default:0widthintegerSets the width of the element, scaling up or down if required. A value of '-1' means to keep the aspect ratiodefault:-1minimum value:>=-1xnumberintegerSets the horizontal position of the element in the scene. The value 0 is on the left sidedefault:0ynumberintegerSets the vertical position of the element in the scene. The value 0 is on the top sidedefault:0z-indexnumberintegerElement's z-index. Use this property to reorganize the layering of the elements like in HTMLdefault:0example value:3zoomintegerZooms the element with the specified level percentage. Positive values zoom in, negative values zoom out, zero does not zoom. Zoom can be combined with the pan property to set the focus point of the zoomingminimum value:>=-100maximum value:<=100Subtitles schemaAdds subtitles to the scene or movie by transcribing the voice audio.captionsstringCaptions to use as subtitles. The string can be a URL to a file with the captions or the actual captions content properly encoded. Supported formats are SRT, VTT or ASS. If this property is ommited, the subtitles will be generated automatically from the audio.commentstringUse it for your commentslanguagestringLanguage of the audioallowed values:enbgcacsdanlen-AUen-GBen-NZen-INen-USetfrfinl-BEdede-CHelhihi-Latnhuiditjakolvltmsnoplptpt-BRroruskeses-419svthtrukvidefault:ensettingsobjectSettings to customize the subtitles.default:{}all-capsbooleanMakes the subtitles all capsdefault:falsebox-colorstringColor of the box behind the subtitles. Depending on the style, it can be the background color of the spoken word or the full linedefault:#000000font-familystringFont family of the subtitlesallowed values:ArialLibre BaskervilleLobsterLuckiest GuyNanum Pen ScriptNunitoPacificoRobotoComic NeueOswaldOswald BoldShrikhandFredericka the Greatdefault:Arialfont-sizeintegerFont size of the subtitles. Usual sizes are between 90 and 150. Defaults to 5% of the movie width.line-colorstringColor of the rest of words in the linedefault:#FFFFFFmax-words-per-lineintegerMaximum number of words per linedefault:4outline-colorstringOutline color of the subtitlesdefault:#000000outline-widthintegerWidth of the outlinedefault:0positionstringPosition of the subtitlesallowed values:top-lefttop-centertop-rightcenter-leftcenter-centercenter-rightbottom-leftbottom-centerbottom-rightmid-bottom-centermid-top-centercustomdefault:bottom-centershadow-colorstringShadow color of the subtitlesdefault:#000000shadow-offsetintegerOffset of the shadowdefault:0stylestringStyle of the subtitles. Check the tutorial for more details.allowed values:classicclassic-progressiveclassic-one-wordboxed-lineboxed-worddefault:classicword-colorstringColor of the spoken worddefault:#FFFF00xintegerX coordinate of the subtitlesdefault:0yintegerY coordinate of the subtitlesdefault:0","url":"https://json2video.com/docs/api/"},{"date_scraped_timestamp":1714856003631,"host":"json2video.com","page_title":"API dashboard","text":" \n JSON2Video dashboard page provides a comprehensive location for managing your API account, \n tracking your remaining monthly quota, creating templates, reviewing your video creations, and configuring connections to other services.\n \n \n In case you need to connect the API to other services (like FTP/SFTP or webhooks), \n our dashboard offers an easy-to-use interface to configure these connections.\n \n Login to the dashboard\n \n The dashboard is a simple UI of the JSON2Video API, so you need nothing more than your API key to login:\n \n \n Templates\n \n The Templates screen shows a list of your created templates.\n \n \n Templates allow you to store video JSON scripts in the cloud and reuse them repetitively to create videos.\n They are specially useful combined with the Variables.\n \n Plan and quota information\n \n You can see the current plan and remaining quota for your account in the dashboard.\n \n Render logs\n \n The Render logs screen shows the list of your created movies history. You can filter your history by date, status\n (done, running, done, error or any) and type (final movie, draft movie or any).\n \n \n If the movie was rendered successfully and the link has not expired you can preview or download the movie.\n \n Connections\n \n The Connections page shows a list of your connections to other services (like FTP/SFTP servers).\n You can use the connections to publish your videos to different destinations automatically once the \n rendering process has finished.\n \n \n Check how to use the connections here.\n \n \n ","url":"https://json2video.com/docs/tutorial/dashboard/"},{"date_scraped_timestamp":1714855952147,"host":"json2video.com","page_title":"Adding Text elements","text":" \n Text elements provide a supereasy way to add text animations that accelerate results and deliver professional-looking videos with no effort.\n \n \n There are simple animations for displaying a plain text and others that include text animations in different flavors.\n \n \n Check the available text styles.\n \n \n The settings object in the Text element defines the text properties.\n In general, these are CSS properties such as font-size, color or font-weight.\n \n Font families\n \n The font-family property defines what font to use and\n you can specify any Google Font name or a URL to a TTF or WOFF font.\n \n Examples:\n \"font-family\": \"Montserrat\"\n \"font-family\": \"Roboto\"\n \"font-family\": \"https://fonts.cdnfonts.com/s/23620/Questrian.woff\"\n \n When using Google Fonts\n make sure that you specify a valid font-weight for that font.\n \n Simple static text\n \n This first example shows a simple text centred on the video using all default settings of the Text element \n and the default 001 style. The background of the 001 style\n is transparent, so make sure not to use the same color for the text and the background.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"text\": \"Hello world\",\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->resolution = 'full-hd';\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#4392F1';\n$scene1->addElement([\n\t'type' => 'text',\n\t'text' => 'Hello world',\n\t'duration' => 10\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"resolution\", \"full-hd\");\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#4392F1\");\nscene1.addElement({\n\t\"type\": \"text\",\n\t\"text\": \"Hello world\",\n\t\"duration\": 10\n});\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n The output of the JSON above is:\n \n \n \n Your browser does not support the video tag.\n \n \n \n The Text element defaults are:\n \n \n \n \n Variable\n Default value\n \n \n \n \n style\n 001\n \n \n x\n 0\n \n \n y\n 0\n \n \n width\n 0\n \n \n height\n 0\n \n \n \n \n \n The text is centered horizontally and vertically \n within its defined canvas\n because it's\n the default behaviour of the 001 style.\n Check the default settings for 001 style here.\n \n Text overlay\n \n Of course, we can overlay text to videos and images. \n The following is a nice tribute to Lorem ipsum dummy text.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n },\n {\n \"type\": \"text\",\n \"style\": \"001\",\n \"text\": \"\\\"Lorem ipsum\\\" has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book\",\n \"settings\": {\n \"color\": \"#FFFFFF\",\n \"font-size\": \"60px\",\n \"font-family\": \"Roboto Condensed\",\n \"shadow\": 2,\n \"text-align\": \"left\",\n \"vertical-align\": \"top\"\n },\n \"width\": 960,\n \"x\": 900,\n \"y\": 50\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->resolution = 'full-hd';\n$movie->quality = 'high';\n$movie->draft = true;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->addElement([\n\t'type' => 'video',\n\t'src' => 'https://assets.json2video.com/assets/videos/beach-01.mp4'\n]);\n$scene1->addElement([\n\t'type' => 'text',\n\t'style' => '001',\n\t'text' => '\"Lorem ipsum\" has been the industry\\'s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book',\n\t'settings' => [\n\t'color' => '#FFFFFF',\n\t'font-size' => '60px',\n\t'font-family' => 'Roboto Condensed',\n\t'shadow' => 2,\n\t'text-align' => 'left',\n\t'vertical-align' => 'top'\n\t],\n\t'width' => 960,\n\t'x' => 900,\n\t'y' => 50\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"resolution\", \"full-hd\");\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", true);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.addElement({\n\t\"type\": \"video\",\n\t\"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n});\nscene1.addElement({\n\t\"type\": \"text\",\n\t\"style\": \"001\",\n\t\"text\": \"\\\"Lorem ipsum\\\" has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book\",\n\t\"settings\": {\n\t\"color\": \"#FFFFFF\",\n\t\"font-size\": \"60px\",\n\t\"font-family\": \"Roboto Condensed\",\n\t\"shadow\": 2,\n\t\"text-align\": \"left\",\n\t\"vertical-align\": \"top\"\n\t},\n\t\"width\": 960,\n\t\"x\": 900,\n\t\"y\": 50\n});\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n The movie script does the following:\n \n The movie includes a scene with 2 elements: a video element and a text element\n The video element just links to the beach video that sits on the background\n The text element uses the 001 style to print a static text\n The text element is top-left-aligned and customises the foreground color, font family and size, adding a subtle shadow below the text\n \n \n In the font-family property you can use any Google Font. \n Be careful because Google Font font-family names are case sensitive,\n and must match with an existing font-weight.\n \n Text animation\n \n Text elements also allow you to create text animations based on existing styles. You can browse all the available\n text styles in the library.\n \n \n The following example uses the 003 style to show a simple text animation that shows the text word by word:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#6BAA75\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"003\",\n \"text\": \"JSON2Video is your video editing API\",\n \"settings\": {\n \"shadow\": 0,\n \"font-size\": \"80px\",\n \"font-family\": \"Inter\",\n \"font-weight\": \"900\"\n },\n \"width\": 960,\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->resolution = 'full-hd';\n$movie->quality = 'high';\n$movie->draft = true;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#6BAA75';\n$scene1->addElement([\n\t'type' => 'text',\n\t'style' => '003',\n\t'text' => 'JSON2Video is your video editing API',\n\t'settings' => [\n\t'shadow' => 0,\n\t'font-size' => '80px',\n\t'font-family' => 'Inter',\n\t'font-weight' => '900'\n\t],\n\t'width' => 960,\n\t'duration' => 5\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"resolution\", \"full-hd\");\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", true);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#6BAA75\");\nscene1.addElement({\n\t\"type\": \"text\",\n\t\"style\": \"003\",\n\t\"text\": \"JSON2Video is your video editing API\",\n\t\"settings\": {\n\t\"shadow\": 0,\n\t\"font-size\": \"80px\",\n\t\"font-family\": \"Inter\",\n\t\"font-weight\": \"900\"\n\t},\n\t\"width\": 960,\n\t\"duration\": 5\n});\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n ","url":"https://json2video.com/docs/tutorial/text-elements/"},{"date_scraped_timestamp":1714855986001,"host":"json2video.com","page_title":"Advanced component pack","text":"\n This collection provides additional components to create amazing videos. Component packs\n","url":"https://json2video.com/docs/resources/advanced/"},{"date_scraped_timestamp":1714855995750,"host":"json2video.com","page_title":"Animated button component","text":"Animated button componentInclude buttons in your videos to motivate users to click Demo:\n \n \n advanced/050 component schema\n \n This is a simplified schema of a advanced/050 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"advanced/050\",\n \"settings\": {\n \"button\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for advanced/050\n \n \n This component accepts the following object items in the settings property:\n \n \n button object\n Defines the button properties\n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n Usage examples\n \n Check the following examples of advanced/050:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 1920,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/050\",\n \"settings\": {\n \"button\": {\n \"background\": \"#E3170A\",\n \"border\": \"0.2vw solid rgba(0,0,0,20%)\",\n \"border-radius\": \"3vw\",\n \"padding\": \"0 15vw\",\n \"box-shadow\": \"inset -1vw -1vw 1vw rgba(0,0,0,0.2)\",\n \"text\": \"Subscribe!\",\n \"text-shadow\": \".3vw .3vw rgba(0,0,0,0.4)\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n }\n },\n \"duration\": 10,\n \"width\": -1,\n \"height\": -1,\n \"start\": 0,\n \"extra-time\": 0,\n \"z-index\": 0,\n \"cache\": true,\n \"position\": \"custom\",\n \"x\": 0,\n \"y\": 0\n }\n ],\n \"duration\": -1\n }\n ],\n \"resolution\": \"full-hd\"\n}\n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 640,\n \"height\": 320,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#FAF3DD\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/050\",\n \"settings\": {\n \"button\": {\n \"background\": \"#E3170A\",\n \"border\": \"0.2vw solid rgba(0,0,0,20%)\",\n \"border-radius\": \"3vw\",\n \"padding\": \"0 15vw\",\n \"box-shadow\": \"inset -1vw -1vw 1vw rgba(0,0,0,0.2)\",\n \"text\": \"Subscribe!\",\n \"text-shadow\": \".3vw .3vw rgba(0,0,0,0.4)\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n }\n },\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n Example 3\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 640,\n \"height\": 320,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#FFFFFF\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/050\",\n \"settings\": {\n \"button\": {\n \"background\": \"black\",\n \"padding\": \"0 15vw\",\n \"box-shadow\": \"2vw 2vw 0 limegreen\",\n \"text\": \"NEXT »\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n }\n },\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/advanced/050"},{"date_scraped_timestamp":1714855966330,"host":"json2video.com","page_title":"Audio elements - JSON2Video.com","text":" \n Audio is one of the most important parts of any video production, \n making users engage with the content and the message.\n Audio elements allow you to add sound and music to your video and \n works in a quite similar way than Video elements.\n \n \n If an audio element is added to a scene, the audio is contained \n in the scene and will be cut when moving to the next scene. \n On the other hand if an Audio element is added directly as a \n movie element, the audio is played over the scenes.\n Now we will see this in the next 2 examples.\n \n Adding sound to a scene\n \n In this first example we will create a video with 2 scenes. In the first scene we will add some thunder sound effects to a muted video,\n and we will leave the second scene without audio.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/thunder-storm-02.mp4\"\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-01.mp3\"\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-02.mp3\",\n \"start\": 2.5\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-01.mp3\",\n \"start\": 5.2\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-02.mp3\",\n \"start\": 8\n }\n ],\n \"duration\": 10\n },\n {\n \"comment\": \"Scene #2\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/rain-01.mp4\"\n }\n ],\n \"duration\": 10\n }\n ]\n}\n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n As expected, when the video switches from scene #1 to scene #2, audio gets muted as scene #2 has no audio.\n \n Adding sound to a movie with multiple scenes\n \n In this second example, we will add the sound effects as movie elements instead of scene #1 elements:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/thunder-storm-02.mp4\"\n }\n ],\n \"duration\": 10\n },\n {\n \"comment\": \"Scene #2\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/rain-01.mp4\"\n }\n ],\n \"duration\": 10\n }\n ],\n \"elements\": [\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-01.mp3\"\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-02.mp3\",\n \"start\": 2.5\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-01.mp3\",\n \"start\": 5.2\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/thunder-02.mp3\",\n \"start\": 8\n }\n ]\n}\n \n \n \n \n \n The resulting video has audio over the 2 scenes, as thunder sound effects extend longer than the scene #1.\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n Adjusting the music to the length of the movie\n \n It's a common scenario that you want to add a music soundtrack that is longer than the movie itself.\n In this situations, the music (or any audio) can be adjusted to the length of the movie and also add a final fade out so music does not end abruptly.\n \n \n The easiest way to do this is to set the duration of the audio element to -2 (sets the length to the duration of the movie)\n and the fade-out to the number of seconds to fade out the music.\n \n \n In this example, we will force the audio to match the length of the movie and add a fade out at the end of the movie:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"id\": \"q8azbhvg\",\n \"comment\": \"Audio example\",\n \"width\": 1920,\n \"height\": 1080,\n \"draft\": false,\n \"scenes\": [\n {\n \"id\": \"qlhg1xpe\",\n \"comment\": \"Intro bumper\",\n \"elements\": [\n {\n \"id\": \"q9fwzjpg\",\n \"type\": \"component\",\n \"component\": \"basic/000\",\n \"settings\": {\n \"headline\": {\n \"text\": [\n \"Example of adjusted music\"\n ],\n \"color\": \"white\",\n \"font-family\": \"Roboto Mono\",\n \"font-weight\": \"400\",\n \"letter-spacing\": \"0.5px\"\n },\n \"body\": {\n \"color\": \"white\",\n \"text\": [\n \"\"\n ],\n \"font-family\": \"Roboto Mono\",\n \"font-weight\": \"400\"\n },\n \"card\": {\n \"vertical-align\": \"center\",\n \"text-align\": \"center\",\n \"padding\": \"2vw\"\n }\n },\n \"x\": 0,\n \"y\": 0,\n \"duration\": 5,\n \"comment\": \"Simple card\",\n \"position\": \"custom\",\n \"width\": -1,\n \"height\": -1\n }\n ],\n \"background-color\": \"#000000\"\n },\n {\n \"id\": \"qk1jl7du\",\n \"comment\": \"Snowy landscape\",\n \"elements\": [\n {\n \"id\": \"qh6ersxf\",\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/landscape-01.mp4\",\n \"fade-out\": 2\n }\n ]\n }\n ],\n \"elements\": [\n {\n \"id\": \"qu658a67\",\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/advertime.mp3\",\n \"duration\": -2,\n \"fade-out\": 3\n }\n ],\n \"resolution\": \"custom\"\n}\n \n \n \n \n \n The resulting video is (turn volume on):\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n Balancing music and voice volume\n \n When you want to add music and narration to a video, \n you typically need to adjust the volume so that the voice can be heard clearly. \n The best option is to keep the voice at its original volume and reduce the \n volume of the music.\n \n \n For this purpose, the API provides the volume property in elements of type \n video, audio and voice. \n This property adjusts the volume gain.\n \n \n This means it is a relative volume value compared to the original volume:\n \n \n A value of 1 means there is no gain, and the original audio remains unchanged.\n Values greater than 1 increase the gain, making the volume louder.\n Values less than 1 decrease the gain, making the volume lower.\n \n \n When you are combining music and voice, the recommended option in these cases is:\n \n Keep the voice at volume 1\n Apply a volume of 0.3 for the music\n \n Depending on the type of music, you may need to adjust the value of 0.3, but you can start testing from that value.\n ","url":"https://json2video.com/docs/tutorial/audio-elements/"},{"date_scraped_timestamp":1714855958894,"host":"json2video.com","page_title":"Audiogram elements","text":" \n The Audiogram elements allow you to add audio waves to your videos automatically. You can customize the color, size and position of the waves and generate\n creative audiograms for your podcasts or social media videos.\n \n \n In the following examples we will see how you can include audiogram elements in our videos.\n \n Simple audiogram\n \n In this example we will add a simple audiogram to a scene:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/mozart-kv525.mp3\",\n \"duration\": 15\n },\n {\n \"type\": \"audiogram\",\n \"height\": 400,\n \"color\": \"green\",\n \"amplitude\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The resulting video is (unmute the player to hear the audio):\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n The video uses one scene with 2 elements:\n \n \n The first element is a simple MP3 audio file\n The second element is the audiogram\n \n \n In this example, we are overlaying the audiogram at the top-left corner of the video (x=0, y=0 are the default values).\n The audiogram is set to 400px high, and a relative amplitude of 10.\n \n Two color audiograms\n \n You can overlay two audiograms on top of each other to create a more creative audiogram using different colors, opacities and amplitudes.\n \n \n Example:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/Wolfgang-amadeus-mozart_1.jpg/440px-Wolfgang-amadeus-mozart_1.jpg\",\n \"position\": \"center-center\"\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://assets.json2video.com/assets/audios/mozart-kv525.mp3\",\n \"duration\": 15\n },\n {\n \"type\": \"audiogram\",\n \"y\": 400,\n \"height\": 300,\n \"color\": \"#f74f43\",\n \"opacity\": 0.6,\n \"amplitude\": 10\n },\n {\n \"type\": \"audiogram\",\n \"y\": 400,\n \"height\": 300,\n \"color\": \"white\",\n \"opacity\": 1,\n \"amplitude\": 5\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n This example uses two audiograms:\n \n \n The first one is a light red with some transparency and an amplitude of 10\n The second one, overlays the first one with a smaller amplitude and in white color\n \n Other effects\n \n You can also use other effects to create more creative audiograms, like cropping, fading, scaling or rotating.\n In the following video, we combine these effects to show how they work.\n \n \n Example:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://images.pexels.com/photos/3944091/pexels-photo-3944091.jpeg\",\n \"scale\": {\n \"width\": 1280,\n \"height\": 720\n },\n \"zoom\": 5\n },\n {\n \"type\": \"audio\",\n \"src\": \"https://json2video-test.s3.amazonaws.com/assets/audios/happy-music-01.mp3\",\n \"duration\": 15\n },\n {\n \"type\": \"audiogram\",\n \"x\": -640,\n \"height\": 720,\n \"color\": \"#f74f43\",\n \"opacity\": 0.6,\n \"amplitude\": 8,\n \"rotate\": {\n \"angle\": 90\n }\n },\n {\n \"type\": \"audiogram\",\n \"x\": -640,\n \"height\": 720,\n \"color\": \"yellow\",\n \"opacity\": 0.5,\n \"amplitude\": 3,\n \"rotate\": {\n \"angle\": 90\n }\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The resulting video is (unmute the player to hear the audio):\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n This example uses rotates the audiogram vertically and translates it to the left side.\n \n ","url":"https://json2video.com/docs/tutorial/audiogram-elements/"},{"date_scraped_timestamp":1714855998152,"host":"json2video.com","page_title":"Avatar lower-third component","text":"\n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/programming-01.mp4\"\n },\n {\n \"type\": \"component\",\n \"component\": \"basic/051\",\n \"settings\": {\n \"card\": {\n \"vertical-align\": \"bottom\"\n },\n \"headline\": {\n \"text\": \"Shall we play a game?\",\n \"font-size\": \"auto\",\n \"font-family\": \"Share Tech Mono\",\n \"font-weight\": \"400\",\n \"color\": \"#32fc70\",\n \"background\": \"#1a4527\"\n },\n \"image\": {\n \"src\": \"https://assets.json2video.com/assets/images/broderick-avatar-01.jpg\"\n }\n },\n \"start\": 3\n }\n ]\n }\n ]\n}\n \n \n","url":"https://json2video.com/docs/resources/basic/051"},{"date_scraped_timestamp":1714855966747,"host":"json2video.com","page_title":"Basic component pack","text":"\n This collection provides simple but awesome component elements for your videos. Component packs\n","url":"https://json2video.com/docs/resources/basic/"},{"date_scraped_timestamp":1714856006145,"host":"json2video.com","page_title":"Button with mouse click component","text":"Button with mouse click componentSimulate a user clicking a button. You can customize the button with different colors, shapes, backgrounds, etc. Demo:\n \n \n advanced/051 component schema\n \n This is a simplified schema of a advanced/051 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"advanced/051\",\n \"settings\": {\n \"button\": {},\n \"cursor\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for advanced/051\n \n \n This component accepts the following object items in the settings property:\n \n \n button object\n Defines the button properties\n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n cursor object\n \n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n Usage examples\n \n Check the following examples of advanced/051:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/051\",\n \"settings\": {\n \"button\": {\n \"background\": \"red\",\n \"border\": \"2px solid #b30000\",\n \"border-radius\": \"0\",\n \"padding\": \"0 15vw\",\n \"text\": \"SUBSCRIBE\",\n \"color\": \"white\",\n \"text-shadow\": \"2px 2px 0px rgba(50,50,50,0.5)\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n },\n \"cursor\": {\n \"width\": \"10vw\",\n \"height\": \"10vw\"\n }\n },\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 607,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/fashion-01.mp4\",\n \"scale\": {\n \"width\": 607\n }\n },\n {\n \"type\": \"component\",\n \"component\": \"advanced/051\",\n \"settings\": {\n \"button\": {\n \"background\": \"white\",\n \"padding\": \"0 8vw\",\n \"border-radius\": \"10vw\",\n \"text\": \"BUY NOW\",\n \"color\": \"#222\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n },\n \"cursor\": {\n \"width\": \"12vw\",\n \"height\": \"12vw\"\n }\n },\n \"start\": 1,\n \"y\": 540,\n \"height\": 540\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/advanced/051"},{"date_scraped_timestamp":1714855987196,"host":"json2video.com","page_title":"CNN-style lower-third component","text":"CNN-style lower-third componentThis component is inpired on the lower-thirds used by CNN for the breaking news Demo:\n \n \n basic/050 component schema\n \n This is a simplified schema of a basic/050 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"basic/050\",\n \"settings\": {\n \"headline\": {},\n \"lead\": {},\n \"card\": {},\n \"bar\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for basic/050\n \n \n This component accepts the following object items in the settings property:\n \n \n headline object\n \n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n text\n \n \"Lorem ipsum dolor sit amet\" \n \n \n \n \n font-size\n \n \"auto\"A value of auto lets the component resize the text to fit the available space \n \n \n \n \n \n \n \n \n \n lead object\n \n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n text\n \n \"Lorem ipsum dolor sit amet, <em>consectetur adipiscing elit</em>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" \n \n \n \n \n font-size\n \n \"auto\"A value of auto lets the component resize the text to fit the available space \n \n \n \n \n \n \n \n \n card object\n \n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n bar object\n \n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n Usage examples\n \n Check the following examples of basic/050:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"duration\": 5,\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/050\",\n \"settings\": {\n \"headline\": {\n \"text\": \"Lorem ipsum dolor sit amet\"\n }\n }\n }\n ],\n \"background-color\": \"#4392F1\",\n \"cache\": true\n }\n ]\n}\n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/new-york-01.mp4\"\n },\n {\n \"type\": \"component\",\n \"component\": \"basic/050\",\n \"settings\": {\n \"card\": {\n \"vertical-align\": \"bottom\"\n },\n \"headline\": {\n \"text\": \"Broadway will allow theatergoers to go mask optional in July\",\n \"font-size\": \"auto\"\n },\n \"lead\": {\n \"text\": \"Proof of vaccination is no longer required for patrons of the city's indoor dining, fitness and entertainment venues.\",\n \"font-size\": \"auto\"\n }\n },\n \"start\": 3\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/basic/050"},{"date_scraped_timestamp":1714855989431,"host":"json2video.com","page_title":"Card with left bar component","text":"\n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/001\",\n \"settings\": {\n \"bar\": {\n \"background\": \"#b0feff\"\n },\n \"headline\": {\n \"text\": \"Lorem ipsum dolor sit amet\",\n \"color\": \"white\"\n },\n \"body\": {\n \"text\": [\n \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n \"Phasellus elit sem, dignissim convallis ligula vitae, venenatis fermentum risus. Suspendisse viverra ut ipsum eget ullamcorper.\"\n ],\n \"color\": \"white\"\n }\n },\n \"width\": 1600,\n \"height\": 760,\n \"x\": 160,\n \"y\": 160,\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n","url":"https://json2video.com/docs/resources/basic/001"},{"date_scraped_timestamp":1714855993596,"host":"json2video.com","page_title":"Ceil and floor style","text":"\n Component packs\nCeil and floor style Demo:\n \n \n 008 style schema\n \n This is a simplified schema of a 008 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"008\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 008\n \n \n This text style has the following default properties in the settings field:\n \n \n Object property\n Default value\n \n \n Usage examples\n \n Check the following examples of 008:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#42CAFD\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"008\",\n \"text\": \"Ceil and floor\",\n \"settings\": {\n \"color\": \"white\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Bebas Neue\"\n },\n \"duration\": 5,\n \"cache\": false\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#42CAFD';\n$scene1->addElement([\n'text',\n'008',\n'Ceil and floor',\n\t[\n'white',\n'10vw',\n'Bebas Neue'\n\t],\n5,\nfalse\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#42CAFD\");\nscene1.addElement([\n\"text\",\n\"008\",\n\"Ceil and floor\",\n\t[\n\"white\",\n\"10vw\",\n\"Bebas Neue\"\n\t],\n5,\nfalse\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/008"},{"date_scraped_timestamp":1714856001704,"host":"json2video.com","page_title":"Component elements","text":"\n \n You don't need to start your video from scratch. Even if you are not a graphical designer, you can use the Component elements\n to quickly create good-looking videos with no effort.\n \n \n The component element is a very powerful tool to supercharge your videos with \n ready to use predefined features and designs.\n But these predefined designs are highly customizable using CSS and propietary properties. \n \n \n \n Anatomy of a component element \n \n \n Component elements have this blueprint:\n \n \n {\n \"type\": \"component\",\n \"component\": \"[[component-id]]\",\n \"settings\": {\n \"[[item]]\": {\n \"[[item-property]]\": \"[[item-value]]\"\n }\n }\n}\n \n \n \n \n component-id: \n The component property of the element defines what component to use in the format of pack/number. \n Example basic/001.\n \n \n settings:\n The settings object of the element defines your customizations to the component,\n and can have multiple item objects as properties.\n Each item represents a visual element in the component, like the headline, an image\n or a card.\n \n \n item properties:\n With the item properties you can change the look and behaviour of the\n item and they are basically CSS properties plus a few propietary properties.\n \n \n \n This is a full example of a component element:\n \n \n {\n \"type\": \"component\",\n \"component\": \"basic/001\",\n \"settings\": {\n \"card\": {\n \"background\": \"white\",\n \"border-radius\": \"10px\",\n \"padding\": \"1vw\"\n },\n \"headline\": {\n \"color\": \"red\",\n \"font-size\": \"5vw\",\n \"font-family\": \"Inter\"\n }\n }\n}\n \n \n \n Supported CSS properties in components\n \n \n In the contrary of the HTML elements that\n support any HTML5 tag and any CSS3 declaration, \n Component elements support \n a limited sort of CSS3 properties.\n \n \n The list of supported CSS properties are:\n \n \n background\n background-blend-mode\n background-clip\n background-color\n background-image\n background-origin\n background-position\n background-repeat\n background-size\n border\n border-bottom\n border-bottom-left-radius\n border-bottom-right-radius\n border-collapse\n border-color\n border-left\n border-radius\n border-right\n border-spacing\n border-style\n border-top\n border-top-left-radius\n border-top-right-radius\n border-width\n box-shadow\n color\n dir\n display\n drop-shadow\n font-family\n font-size\n font-weight\n height\n letter-spacing\n line-height\n margin\n margin-bottom\n margin-left\n margin-right\n margin-top\n opacity\n padding\n padding-bottom\n padding-left\n padding-right\n padding-top\n text-align\n text-shadow\n text-stroke\n transform\n transform-origin\n width\n \n \n Propietary properties in components\n \n \n JSON2Video uses a few propietary properties to simplify the customization of the \n components.\n \n \n This propietary properties are:\n \n \n \n easing\n Sets the easing function for an animation\n \n \n horizontal-align\n Defines how an item aligns horizontally. Possible values: left | center | right\n \n \n horizontal-position\n Defines how an item aligns horizontally. Possible values: left | center | right\n \n \n src\n Defines the source URL of an item, usually an image. Example: https://example.com/image.jpg\n \n \n vertical-align\n Defines how an item aligns vertically. Possible values: top | center | bottom\n \n \n vertical-position\n Defines how an item aligns vertically. Possible values: top | center | bottom\n \n \n Component examples\n \n Lower-third example\n \n In the television industry, a lower third is a graphic overlay placed in the lower\n area of the screen, though not necessarily the entire lower third of it, as the name suggests.\n \n \n JSON2Video library has a few lower-third components you can use out-of-the-box in \n your projects. The following example shows how to add a lower-third to a video.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"duration\": 5,\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/050\",\n \"settings\": {\n \"headline\": {\n \"text\": \"Lorem ipsum dolor sit amet\"\n }\n }\n }\n ],\n \"background-color\": \"#4392F1\",\n \"cache\": true\n }\n ]\n}\n \n \n \n \n \n The basic/050 component is inpired on the lower thirds used by CNN.\n \n \n You can get all details of basic/050 here.\n \n \n Button example\n \n This example showcases how to create a visual button you can add to your video as \n a call-to-action.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 1920,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/050\",\n \"settings\": {\n \"button\": {\n \"background\": \"#E3170A\",\n \"border\": \"0.2vw solid rgba(0,0,0,20%)\",\n \"border-radius\": \"3vw\",\n \"padding\": \"0 15vw\",\n \"box-shadow\": \"inset -1vw -1vw 1vw rgba(0,0,0,0.2)\",\n \"text\": \"Subscribe!\",\n \"text-shadow\": \".3vw .3vw rgba(0,0,0,0.4)\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n }\n },\n \"duration\": 10,\n \"width\": -1,\n \"height\": -1,\n \"start\": 0,\n \"extra-time\": 0,\n \"z-index\": 0,\n \"cache\": true,\n \"position\": \"custom\",\n \"x\": 0,\n \"y\": 0\n }\n ],\n \"duration\": -1\n }\n ],\n \"resolution\": \"full-hd\"\n}\n \n \n \n \n \n Other examples\n \n Check other component examples in the Resources section.\n \n \n \n ","url":"https://json2video.com/docs/tutorial/component-elements/"},{"date_scraped_timestamp":1714855968233,"host":"json2video.com","page_title":"Convert text to voice","text":" \n The Voice elements allow you to easily add voice-over to your videos by simply indicating the text to be spoken and the type of voice (and language) to be used.\n \n \n JSON2Video uses\n Microsoft Azure's Text-To-Speech service\n to achieve the most natural voices and the widest variety of languages and accents.\n \n \n Check the full list of available voices and languages.\n \n \n In the following examples we will see how we can include voice elements in our videos.\n \n Simple voice over\n \n In this example we will use the default voice to add a short voice-over to a still image video:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/space-apollo11-01.jpg\",\n \"scale\": {\n \"width\": 1920,\n \"height\": 1280\n },\n \"zoom\": 5\n },\n {\n \"type\": \"voice\",\n \"text\": \"That's one small step for a man, one giant leap for mankind. Upon taking a \\\"small step\\\" onto the surface of the moon in 1969, Neil Armstrong uttered what would become one of history's most famous one-liners.\",\n \"start\": 1.5\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n The video uses one scene with 2 elements:\n \n \n The first element is an image re-scaled down to 1920x1280 to keep the original 3:2 aspect ratio\n The second element is a voice element with the voice-over text that starts 1.5 seconds from the beginning of the scene\n \n \n In this example, we are not indicating the voice to use, so it uses the default value for the voice field: en-GB-LibbyNeural.\n \n Using multiple voices\n \n In this example, we will use two voices in two different languages to showcase the Voice element features.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/woman-01.jpg\",\n \"y\": -100\n },\n {\n \"type\": \"voice\",\n \"text\": \"Hello Diego! Could you please introduce yourself in Italian?\",\n \"voice\": \"en-US-AriaNeural\",\n \"start\": 1\n }\n ]\n },\n {\n \"comment\": \"Scene #2\",\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/man-01.jpg\",\n \"y\": -100\n },\n {\n \"type\": \"voice\",\n \"text\": \"S\\u00ec, certo, Aria. Mi chiamo Diego Rossi e sono di Firenze.\",\n \"voice\": \"it-IT-DiegoNeural\"\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n The video simulates a short conversation between an English-speaking woman and an Italian-speaking man.\n \n \n In the first scene, we add an image of the woman, a text element with the subtitle and a Voice element with the English text\n In the second scene, we add an image of the man, the subtitle and the Voice element with the Italian text\n \n Changing the pace of the voice\n \n You can use a few tags to change the pace of the voice:\n \n \n <super-slow>: makes the voice very slow\n <slow>: makes the voice a bit slower\n <normal>: makes the voice normal speed\n <fast>: makes the voice a bit faster\n <super-fast>: makes the voice very fast\n \n \n Just wrap the text with the tags to apply the voice change. Examples:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"voice\",\n \"text\": \"That's one small step for a man, <super-slow>one giant leap for mankind</super-slow>. <fast>Upon taking a \\\"small step\\\" onto the surface of the moon in 1969</fast>, Neil Armstrong uttered what would become <slow>one of history's most famous one-liners</slow>.\",\n \"start\": 1.5\n }\n ]\n }\n ]\n}\n \n \n \n \n Expressing emotion\n \n You can also add an emotion to the voice over by using tags.\n \n \n These are the supported emotions:\n \n \n <ad>\n <advertisement_upbeat>\n <affectionate>\n <angry>\n <assistant>\n <calm>\n <chat>\n <cheerful>\n <customerservice>\n <depressed>\n <disgruntled>\n <documentary-narration>\n <embarrassed>\n <empathetic>\n <envious>\n <excited>\n <fearful>\n <friendly>\n <gentle>\n <hopeful>\n <lyrical>\n <narration-professional>\n <narration-relaxed>\n <newscast>\n <newscast-casual>\n <newscast-formal>\n <poetry-reading>\n <sad>\n <serious>\n <shouting>\n <sports_commentary>\n <sports_commentary_excited>\n <whispering>\n <terrified>\n <unfriendly>\n \n \n Example:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"voice\",\n \"voice\": \"en-US-AriaNeural\",\n \"text\": \"<cheerful>\\\"That's remarkable! You're a genius!\\\"</cheerful> Mom said to her son.\",\n \"start\": 1.5\n }\n ]\n }\n ]\n}\n \n \n \n \n Using SSML\n \n Finally, you can use SSML tags to express more complex nuances.\n \n \n Example:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"voice\",\n \"voice\": \"en-US-AriaNeural\",\n \"text\": \"<mstts:express-as style=\\\"cheerful\\\">\\\"That's remarkable! You're a genius!\\\"</mstts:express-as><break time=\\\"600ms\\\" />Mom said to her son.\",\n \"start\": 1.5\n }\n ]\n }\n ]\n}\n \n \n \n \n Balancing music and voice volume\n \n When you want to add music and narration to a video,\n you typically need to adjust the volume so that the voice can be heard clearly.\n The best option is to keep the voice at its original volume and reduce the\n volume of the music.\n \n \n Read this section in the\n audio elements documentation.\n \n ","url":"https://json2video.com/docs/tutorial/voice-elements/"},{"date_scraped_timestamp":1714855997799,"host":"json2video.com","page_title":"Counter component","text":"\n {\n \"width\": 640,\n \"height\": 320,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#6BAA75\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/server-01.mp4\",\n \"scale\": {\n \"width\": 640\n }\n },\n {\n \"type\": \"component\",\n \"component\": \"advanced/060\",\n \"settings\": {\n \"counter\": {\n \"text\": \"__num__ Gbps\",\n \"from\": 10,\n \"to\": 115,\n \"duration\": 3000,\n \"color\": \"white\",\n \"text-shadow\": \".2vw .2vw .2vw rgba(50,50,50,0.5)\",\n \"font-size\": \"10vw\",\n \"font-family\": \"Anton\"\n }\n },\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n","url":"https://json2video.com/docs/resources/advanced/060"},{"date_scraped_timestamp":1714855972020,"host":"json2video.com","page_title":"Documentation - JSON2Video.com","text":" \n JSON2Video provides a simple RESTful web API to create and edit videos programmatically, so you can automate your production process, upgrade your existing product or create amazing new services based on the API.\n \n \n Our developer documentation is here to help you create and deliver beautiful video experiences with the most powerful video editing API on the web.\n \n \n First thing you need is a JSON2Video user account:\n \n \n \n Once you have it you can go through the documentation:\n \n \n \n \n \n API Specification \n \n \n \n Learn about the API endpoints, the parameters and the JSON objects you can use to create your videos. \n The API Specification is the ultimate source of truth to validate any object property value or setting.\n \n \n \n \n \n \n API SDKs \n \n \n \n Create videos programmatically using your preferred programming language using the SDKs.\n \n \n \n \n \n \n Tutorial \n \n \n \n Learn by doing, or by reviewing the comprehensive list of examples we prepared for you. \n The tutorial includes a step-by-step guide, with progressively more complex examples.\n From how to concatenate two videos, to creating a complex promotional video using voiceover, text animations and music.\n \n \n \n \n \n \n Templates\n \n \n \n The sky's the limit in what you can deliver with JSON2Video. And to cover you on your job, we created amazing and engaging templates ready for you to use in your videos.\n So you can deliver more and quicker.\n \n \n \n \n ","url":"https://json2video.com/docs/"},{"date_scraped_timestamp":1714855990393,"host":"json2video.com","page_title":"Domino falling style","text":"\n Component packs\nDomino falling style Demo:\n \n \n 007 style schema\n \n This is a simplified schema of a 007 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"007\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 007\n \n \n This text style has the following default properties in the settings field:\n \n \n Object property\n Default value\n \n \n Usage examples\n \n Check the following examples of 007:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#C5D86D\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"007\",\n \"text\": \"Domino falling\",\n \"settings\": {\n \"color\": \"black\",\n \"font-size\": \"7vw\",\n \"font-family\": \"Source Serif Pro\",\n \"font-weight\": \"700\"\n },\n \"duration\": 5,\n \"cache\": false\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#C5D86D';\n$scene1->addElement([\n'text',\n'007',\n'Domino falling',\n\t[\n'black',\n'7vw',\n'Source Serif Pro',\n'700'\n\t],\n5,\nfalse\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#C5D86D\");\nscene1.addElement([\n\"text\",\n\"007\",\n\"Domino falling\",\n\t[\n\"black\",\n\"7vw\",\n\"Source Serif Pro\",\n\"700\"\n\t],\n5,\nfalse\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/007"},{"date_scraped_timestamp":1714856005955,"host":"json2video.com","page_title":"Elastic box component","text":"Elastic box component Demo:\n \n \n basic/100 component schema\n \n This is a simplified schema of a basic/100 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"basic/100\",\n \"settings\": {\n \"box\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for basic/100\n \n \n This component accepts the following object items in the settings property:\n \n \n box object\n \n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n Usage examples\n \n Check the following examples of basic/100:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"duration\": 5,\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/100\",\n \"settings\": {\n \"box\": {\n \"background\": \"white\",\n \"box-shadow\": \"none\",\n \"final_width\": \"50%\"\n }\n }\n }\n ],\n \"background-color\": \"#4392F1\"\n }\n ]\n}\n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#1A281F\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/new-york-02.mp4\",\n \"scale\": {\n \"width\": 640\n },\n \"start\": 1,\n \"duration\": 15,\n \"muted\": true\n },\n {\n \"type\": \"component\",\n \"component\": \"basic/100\",\n \"settings\": {\n \"box\": {\n \"final_width\": \"40%\",\n \"background\": \"#1A281F\",\n \"box-shadow\": \"none\",\n \"duration\": 2000\n }\n },\n \"start\": 1\n },\n {\n \"type\": \"text\",\n \"style\": \"004\",\n \"text\": \"newyork\",\n \"settings\": {\n \"font-family\": \"Libre Baskerville\",\n \"font-weight\": \"400\",\n \"font-size\": \"60px\"\n },\n \"width\": 256,\n \"start\": 2.5\n }\n ]\n }\n ]\n}\n \n \n \n \n Example 3\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 360,\n \"height\": 640,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/food-01.mp4\",\n \"scale\": {\n \"width\": 400\n },\n \"start\": 1,\n \"muted\": true\n },\n {\n \"type\": \"component\",\n \"component\": \"basic/100\",\n \"settings\": {\n \"box\": {\n \"initial_top\": \"90%\",\n \"initial_height\": \"0%\",\n \"final_top\": \"80%\",\n \"final_height\": \"20%\",\n \"background\": \"#FAF3DD\",\n \"duration\": 3000\n }\n },\n \"start\": 1\n },\n {\n \"type\": \"text\",\n \"style\": \"004\",\n \"text\": \"Enjoy!\",\n \"settings\": {\n \"font-family\": \"Shadows Into Light\",\n \"font-weight\": \"400\",\n \"font-size\": \"80px\",\n \"color\": \"#333333\",\n \"text-shadow\": \"none\"\n },\n \"y\": 512,\n \"height\": 128,\n \"start\": 3\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/basic/100"},{"date_scraped_timestamp":1714856007766,"host":"json2video.com","page_title":"Empty page","text":"\n \n \n \n JSON2Video\n \n \n \n Your video editing API\n Create engaging videos from simple JSON snippets.\n \n \n \n \n \n \n \n Documentation\n Video Editing API specification\n Tutorial\n Examples\n \n \n Learn\n Video automation\n Video API\n Convert JSON to video\n News video summary\n \n \n Contact\n Drop us a message\n \n \n Legal\n Legal home page\n API Terms of use\n Privacy Policy\n \n \n \n \n © JSON2Video - The video editing API - 2024 - All rights reserved\n ","url":"https://json2video.com/docs/resources/"},{"date_scraped_timestamp":1714855948952,"host":"json2video.com","page_title":"Exports","text":" \n JSON2Video API offers a variety of export options to choose from, including publishing to FTP or SFTP servers. \n This means that you can easily automate the upload your videos to their final destination without checking continously the render status.\n \n \n In addition to these export options, the API also allows you to define a call a webhook once the export process has finished. \n This feature can be incredibly useful for tracking the progress of your video exports or triggering additional actions once the export is complete.\n \n exports property\n \n The exports property of the movie object is an array used to configure the export process, with the following options:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"my-destination-id\",\n }]\n }]\n}\n \n \n \n Currently, the exports array only supports one item, but the destinations array can be used to specify multiple destinations.\n \n \n destinations property\n \n The destinations property of the exports object is an array used to configure the different destinations of the export process.\n You can specify multiple destinations for example to publish to more than one SFTP server.\n \n \n Each destination item is an object with different properties depending on the type of destination.\n Destination items are executed in the order they are specified in the destinations array, therefore \n the first destination item in the destinations array will be executed first,\n the second item will be executed after the first one finishes, etc.\n \n \n The following types of destinations are currently supported:\n \n \n FTP and SFTP destinations\n Webhook destinations\n Email destinations\n \n \n The process of exporting to all the destinations is limited to 5 minutes.\n If any of the uploads takes too much time, the process may timeout and can be aborted.\n \n Defining destinations\n \n For secutity reasons, it's not a good idea to include connection details and credentials in \n every call to the API, as they can be accidentally exposed.\n A solution to this is to use the Connections in the dashboard to store all or part of the destination details\n backend side and refer to it by an id.\n \n \n The id is used to refer to the connection in the Connections section of the dashboard.\n In the example above, the id is test-ftp and the JSON would look like this:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"test-ftp\"\n }]\n }]\n}\n \n \n \n Sensible fields (like passwords or API keys) are encrypted on our side to keep them safe.\n \n \n If needed, any of the properties (with the exception of type) can be overwritten real-time in the destination object, for example:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"test-ftp\",\n \"file\": \"myfile.mp4\"\n }]\n }]\n}\n \n \n macros\n \n Fields values can include macros that are evaluated at runtime and can be used to\n generate dynamic values.\n \n \n This is specially usefull when you want to set the name of the file that will be uploaded to a server,\n or create an email message that includes the URL to download the file.\n \n \n __yyyy__: the year number (example: 2023)\n __mm__: the month number (example: 12)\n __dd__: the day number (example: 25)\n __hh__: the hour number (example: 12)\n __nn__: the minute number (example: 30)\n __ss__: the second number (example: 00)\n __random__: a random number (example: 31648)\n __filename__: the original file name created by the API (example: 2023-03-25-38267.mp4)\n __filename_without_extension__: the original file name without extension (example: 2023-03-25-38267)\n __filename_extension__: the original file name without extension (example: mp4)\n \n Example\n \n Here is an example of using macros:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"my-ftp\",\n \"remote-path\": \"./videos/__yyyy__/__mm__/\",\n \"file\": \"__random__.mp4\"\n }]\n }]\n}\n \n \n SFTP and FTP destinations\n \n FTP and SFTP destinations require providing the following properties:\n \n \n type: ftp | sftp\n host: this can be an IP or a domain\n port: 21, 22 or any other port you are using\n username\n password\n \n \n And optionally:\n \n \n remote-path: the remote folder where the movie will be uploaded. If not provided, it defaults to ./\n file: the file name the movie will be renamed to. If not provided, it gives a unique name based on date and a random number\n \n \n The remote-path and the file properties can include dynamic macros that are evaluated at runtime.\n The available macros are:\n \n \n Example\n \n Here is an example of a FTP destination:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"type\": \"ftp\",\n \"host\": \"ftp.dlptest.com\",\n \"port\": 21,\n \"username\": \"dlpuser\",\n \"password\": \"rNrKYTX9g7z3RgJRmxWuGHbeu\",\n \"remote-path\": \"./videos/__yyyy__/__mm__/\",\n \"file\": \"__random__.mp4\"\n }]\n }]\n}\n \n \n \n As said, it's not recommended passing credentials in your API calls.\n Better set up your credentials in the dashboard and reference to them\n in the destinations object with the id property.\n \n Email destinations\n \n You can also send an email when the video render finished, for notification purposes or to trigger \n an action.\n \n \n This is how you can easily automate the publication of videos to Youtube. To learn more, read this \n tutorial: Publishing your videos to Youtube automatically\n \n \n Email destinations require the following properties:\n \n \n type: email\n to: email address\n subject: subject of the email message\n message: body of the email message\n \n \n You can use macros in the property values to generate dynamic values.\n \n ","url":"https://json2video.com/docs/tutorial/exports/"},{"date_scraped_timestamp":1714855984243,"host":"json2video.com","page_title":"Exports","text":" \n JSON2Video API offers a variety of export options to choose from, including publishing to FTP or SFTP servers. \n This means that you can easily automate the upload your videos to their final destination without checking continously the render status.\n \n \n In addition to these export options, the API also allows you to define a call a webhook once the export process has finished. \n This feature can be incredibly useful for tracking the progress of your video exports or triggering additional actions once the export is complete.\n \n exports property\n \n The exports property of the movie object is an array used to configure the export process, with the following options:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"my-destination-id\",\n }]\n }]\n}\n \n \n \n Currently, the exports array only supports one item, but the destinations array can be used to specify multiple destinations.\n \n \n destinations property\n \n The destinations property of the exports object is an array used to configure the different destinations of the export process.\n You can specify multiple destinations for example to publish to more than one SFTP server.\n \n \n Each destination item is an object with different properties depending on the type of destination.\n Destination items are executed in the order they are specified in the destinations array, therefore \n the first destination item in the destinations array will be executed first,\n the second item will be executed after the first one finishes, etc.\n \n \n The following types of destinations are currently supported:\n \n \n FTP and SFTP destinations\n Webhook destinations\n Email destinations\n \n \n The process of exporting to all the destinations is limited to 5 minutes.\n If any of the uploads takes too much time, the process may timeout and can be aborted.\n \n Defining destinations\n \n For secutity reasons, it's not a good idea to include connection details and credentials in \n every call to the API, as they can be accidentally exposed.\n A solution to this is to use the Connections in the dashboard to store all or part of the destination details\n backend side and refer to it by an id.\n \n \n The id is used to refer to the connection in the Connections section of the dashboard.\n In the example above, the id is test-ftp and the JSON would look like this:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"test-ftp\"\n }]\n }]\n}\n \n \n \n Sensible fields (like passwords or API keys) are encrypted on our side to keep them safe.\n \n \n If needed, any of the properties (with the exception of type) can be overwritten real-time in the destination object, for example:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"test-ftp\",\n \"file\": \"myfile.mp4\"\n }]\n }]\n}\n \n \n macros\n \n Fields values can include macros that are evaluated at runtime and can be used to\n generate dynamic values.\n \n \n This is specially usefull when you want to set the name of the file that will be uploaded to a server,\n or create an email message that includes the URL to download the file.\n \n \n __yyyy__: the year number (example: 2023)\n __mm__: the month number (example: 12)\n __dd__: the day number (example: 25)\n __hh__: the hour number (example: 12)\n __nn__: the minute number (example: 30)\n __ss__: the second number (example: 00)\n __random__: a random number (example: 31648)\n __filename__: the original file name created by the API (example: 2023-03-25-38267.mp4)\n __filename_without_extension__: the original file name without extension (example: 2023-03-25-38267)\n __filename_extension__: the original file name without extension (example: mp4)\n \n Example\n \n Here is an example of using macros:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"id\": \"my-ftp\",\n \"remote-path\": \"./videos/__yyyy__/__mm__/\",\n \"file\": \"__random__.mp4\"\n }]\n }]\n}\n \n \n SFTP and FTP destinations\n \n FTP and SFTP destinations require providing the following properties:\n \n \n type: ftp | sftp\n host: this can be an IP or a domain\n port: 21, 22 or any other port you are using\n username\n password\n \n \n And optionally:\n \n \n remote-path: the remote folder where the movie will be uploaded. If not provided, it defaults to ./\n file: the file name the movie will be renamed to. If not provided, it gives a unique name based on date and a random number\n \n \n The remote-path and the file properties can include dynamic macros that are evaluated at runtime.\n The available macros are:\n \n \n Example\n \n Here is an example of a FTP destination:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [{\n \"destinations\": [{\n \"type\": \"ftp\",\n \"host\": \"ftp.dlptest.com\",\n \"port\": 21,\n \"username\": \"dlpuser\",\n \"password\": \"rNrKYTX9g7z3RgJRmxWuGHbeu\",\n \"remote-path\": \"./videos/__yyyy__/__mm__/\",\n \"file\": \"__random__.mp4\"\n }]\n }]\n}\n \n \n \n As said, it's not recommended passing credentials in your API calls.\n Better set up your credentials in the dashboard and reference to them\n in the destinations object with the id property.\n \n Email destinations\n \n You can also send an email when the video render finished, for notification purposes or to trigger \n an action.\n \n \n This is how you can easily automate the publication of videos to Youtube. To learn more, read this \n tutorial: Publishing your videos to Youtube automatically\n \n \n Email destinations require the following properties:\n \n \n type: email\n to: email address\n subject: subject of the email message\n message: body of the email message\n \n \n You can use macros in the property values to generate dynamic values.\n \n ","url":"https://json2video.com/docs/tutorial/exports"},{"date_scraped_timestamp":1714855994228,"host":"json2video.com","page_title":"Falling text animation component","text":"Falling text animation componentUse this text animation component to show text that is revealed word by word. Demo:\n \n \n advanced/001 component schema\n \n This is a simplified schema of a advanced/001 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"advanced/001\",\n \"settings\": {\n \"animation\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for advanced/001\n \n \n This component accepts the following object items in the settings property:\n \n \n animation object\n Defines the animation properties\n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n \n \n \n \n \n speed\n \n 3Defines the falling speed, an integer from 1 to 6 \n \n \n \n \n Usage examples\n \n Check the following examples of advanced/001:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 1920,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/001\",\n \"settings\": {\n \"animation\": {\n \"text\": \"DON'T STOP BELIEVING\",\n \"font-family\": \"Anton\",\n \"font-size\": \"9vw\"\n }\n },\n \"duration\": 7\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 1920;\n$movie->height = 1080;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#4392F1';\n$scene1->addElement([\n'component',\n'advanced/001',\n\t[\n\t[\n'DON\\'T STOP BELIEVING',\n'Anton',\n'9vw'\n\t]\n\t],\n7\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 1920);\nmovie.set(\"height\", 1080);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#4392F1\");\nscene1.addElement([\n\"component\",\n\"advanced/001\",\n\t[\n\t[\n\"DON'T STOP BELIEVING\",\n\"Anton\",\n\"9vw\"\n\t]\n\t],\n7\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 1920,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/jurassic-park-01.jpg\",\n \"scale\": {\n \"width\": 1920\n }\n },\n {\n \"type\": \"component\",\n \"component\": \"advanced/001\",\n \"settings\": {\n \"animation\": {\n \"text\": \"Life finds a way\",\n \"font-face\": \"Inter\",\n \"font-weight\": \"700\",\n \"font-size\": \"8vw\",\n \"text-stroke\": \"5px rgba(50,50,50,0.5)\"\n }\n }\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 1920;\n$movie->height = 1080;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->addElement([\n'image',\n'https://assets.json2video.com/assets/images/jurassic-park-01.jpg',\n\t[\n1920\n\t]\n]);\n$scene1->addElement([\n'component',\n'advanced/001',\n\t[\n\t[\n'Life finds a way',\n'Inter',\n'700',\n'8vw',\n'5px rgba(50,50,50,0.5)'\n\t]\n\t]\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 1920);\nmovie.set(\"height\", 1080);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.addElement([\n\"image\",\n\"https://assets.json2video.com/assets/images/jurassic-park-01.jpg\",\n\t[\n1920\n\t]\n]);\nscene1.addElement([\n\"component\",\n\"advanced/001\",\n\t[\n\t[\n\"Life finds a way\",\n\"Inter\",\n\"700\",\n\"8vw\",\n\"5px rgba(50,50,50,0.5)\"\n\t]\n\t]\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/advanced/001"},{"date_scraped_timestamp":1714855983263,"host":"json2video.com","page_title":"Free letters in style","text":"\n Component packs\nFree letters in style Demo:\n \n \n 009 style schema\n \n This is a simplified schema of a 009 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"009\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 009\n \n \n This text style has the following default properties in the settings field:\n \n \n Object property\n Default value\n \n \n Usage examples\n \n Check the following examples of 009:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"red\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"009\",\n \"text\": \"FREE LETTERS IN\",\n \"settings\": {\n \"color\": \"white\",\n \"font-size\": \"8vw\",\n \"font-family\": \"Inter\",\n \"font-weight\": \"700\"\n },\n \"duration\": 5,\n \"cache\": false\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = 'red';\n$scene1->addElement([\n'text',\n'009',\n'FREE LETTERS IN',\n\t[\n'white',\n'8vw',\n'Inter',\n'700'\n\t],\n5,\nfalse\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"red\");\nscene1.addElement([\n\"text\",\n\"009\",\n\"FREE LETTERS IN\",\n\t[\n\"white\",\n\"8vw\",\n\"Inter\",\n\"700\"\n\t],\n5,\nfalse\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/009"},{"date_scraped_timestamp":1714855976159,"host":"json2video.com","page_title":"Free letters out style","text":"\n Component packs\nFree letters out style Demo:\n \n \n 010 style schema\n \n This is a simplified schema of a 010 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"010\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 010\n \n \n This text style has the following default properties in the settings field:\n \n \n Object property\n Default value\n \n \n Usage examples\n \n Check the following examples of 010:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#F5F5F5\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"010\",\n \"text\": \"FREE LETTERS OUT\",\n \"settings\": {\n \"color\": \"red\",\n \"font-size\": \"8vw\",\n \"font-family\": \"Inter\",\n \"font-weight\": \"700\"\n },\n \"duration\": 5,\n \"cache\": false\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#F5F5F5';\n$scene1->addElement([\n'text',\n'010',\n'FREE LETTERS OUT',\n\t[\n'red',\n'8vw',\n'Inter',\n'700'\n\t],\n5,\nfalse\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#F5F5F5\");\nscene1.addElement([\n\"text\",\n\"010\",\n\"FREE LETTERS OUT\",\n\t[\n\"red\",\n\"8vw\",\n\"Inter\",\n\"700\"\n\t],\n5,\nfalse\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/010"},{"date_scraped_timestamp":1714855922056,"host":"json2video.com","page_title":"Getting started","text":" \n JSON2Video API is the easiest way to create, edit and customise videos programmatically. \n Its dead simple approach, similar to the web development mindset, makes it the ultimate solution \n for developers that want to create or customise videos in an automated way.\n \n \n Additionally, the simple integration of real HTML5+CSS elements, the already built-in templates, animations and voice generation\n (TTS) converts JSON2Video in the best video editing API solution.\n \n Authentication\n \n All calls to the API require authentication.\n \n \n You must pass your API key in the x-api-key header of your request.\n \n \n How to create a movie?\n \n The resulting video of a JSON2Video API call is called movie.\n A movie is created from a JSON document that specifies the properties of the resulting video as well as the content of the video.\n \n \n Check JSON2Video API specification to learn about all properties of this JSON document.\n \n \n To create a movie, you just call the endpoint /v2/movies with a POST request passing the JSON as payload:\n \n \n curl --location --request POST 'https://api.json2video.com/v2/movies' \\\n--header 'x-api-key: [[YOUR_APIKEY]]' \\\n--header 'Content-Type: application/json' \\\n--data-raw '[[YOUR_JSON]]'\n \n \n \n The request returns immediately, but not before starting a server-side job that will create the movie.\n The job can take several minutes, depending on the complexity of the JSON script.\n The endpoint returns a project ID for that job.\n \n \n {\n \"success\": true,\n \"project\": \"[[YOUR_PROJECT_ID]]\",\n \"timestamp\": \"2022-08-01T10:49:52.924Z\"\n}\n \n \n \n Once the job started remotely, you can check the status, if it finished or if an error occurred:\n \n \n curl --location --request GET 'https://api.json2video.com/v2/movies?project=[[YOUR_PROJECT_ID]]' \\\n--header 'x-api-key: [[YOUR_APIKEY]]'\n \n \n \n You can also get notified when the movie is ready via a webhook,\n or automate the publication to YouTube, to a FTP or SFTP server, or send an email.\n Check the Exports documentation for more details.\n \n The movie document\n \n Movie JSON documents have the following structure:\n \n \n {\n \"scenes\": [],\n \"elements\": []\n}\n \n \n \n \n The scenes property is an array of scene-type JSON objects defining the different scenes in the movie. \n Find more information below.\n \n \n The elements property is an array of element JSON objects. \n Find more information below.\n \n Using scenes\n \n A movie can be structured in different scenes. \n The advantage of using scenes is that each one is rendered independently (in parallel!), and finally all of them are chained together to compose the final movie. \n You can apply a transition between scenes to smooth the change between them.\n \n \n {\n \"scenes\": [\n {\n \"comment\": \"This is the scene #1\",\n \"duration\": 10,\n \"elements\": []\n }\n ],\n \"elements\": []\n}\n \n \n \n Each scene is composed of elements (see below) and may have a few properties.\n \n \n Probably the most important property is duration, which defines the duration of the scene. \n If the JSON does not provide an explicit duration, \n the scene will last as long as it needs to contain all its elements.\n If a duration is specified, the scene will be trimmed or lengthened to meet the duration.\n \n Adding elements to a scene or movie\n \n Both movies and scenes can contain elements.\n Elements are the basic unit of content in a movie or a scene, \n and they can be images, texts, audios, videos, etc.\n \n \n Each type of element (image, audio, text, etc) has its own properties.\n You can learn about element types and how to use them later in this \n tutorial or the API specification.\n \n \n All elements share at least the following properties:\n \n \n start: sets the starting point (in seconds) of the element, \n relative to beginning of the scene or to the movie\n duration: sets the duration (in seconds) of the element\n extra-time: adds additional time (in seconds) after duration ends\n \n \n Example of element:\n \n \n {\n \"type\": \"[[ELEMENT_TYPE]]\",\n \"start\": 5,\n \"duration\": 10,\n \"extra-time\": 2\n}\n \n \n \n In this case, the element will appear after 5 seconds and will last 10 seconds. The total time of the element will be 17 seconds (5 + 10 + 2 = 17). \n If this element were the only element in a scene and the duration of that scene was not set, the scene would last 17 seconds.\n \n \n Like in the scenes, if duration is not set, the duration is calculated based on the length of the underlying asset (the video file, audio file, etc).\n If the duration is explicitely set, the element will trim the length of the underlying asset.\n \n Position elements by coordinates\n \n Visual elements (images, texts, videos) can be positioned on the scene or movie based on coordinates.\n \n \n The coordinates system work like in a HTML web page: The 0,0 is on the top-left of the video canvas.\n \n \n The x, y, width and height properties are simply measured in pixels.\n \n Overlaying elements\n \n The elements in the elements array of a scene or a movie are stacked like HTML elements:\n The first element of the array is placed below the second element, the second below the third and so on. \n \n \n The last element of the array is therefore placed above all the others.\n If the elements overlap in the coordinate space, the upper elements will cover the lower elements.\n This may be counter-intuitive for Photoshop or After Effects users, but it follows the logic of HTML and CSS.\n \n Caching and render optimisation\n \n JSON2Video is designed to optimize video rendering as much as possible and reduce waiting time.\n To do this, it uses a caching system to avoid repeatedly downloading the \n same files over and over again, or re-rendering templates or scenes that have not changed.\n \n \n This system is smart enough to rebuild a scene or movie when one of the elements has changed.\n However, you can force the refresh of an element, a scene or the whole movie with the cache property.\n \n \n Example forcing an element to be rendered from scratch:\n \n \n {\n \"type\": \"[[ELEMENT_TYPE]]\",\n \"cache\": false\n}\n \n \n \n The cache property is not inherited by child objects.\n This means that setting a cache:false to a scene only forces the scene to be rendered again, but the elements are not flushed.\n \n \n How to check if your movie is rendered\n \n \n The POST request starts a server-side job that creates and renders your movie,\n but it returns immediately.\n \n \n To check if your movie is completed and ready, you must send a GET request passing \n the project id returned by the POST request.\n \n \n /v2/movies?project=[[YOUR_PROJECT_ID]]\n \n \n \n If everything went fine, the response should look like this:\n \n \n {\n \"success\": true,\n \"movie\": {\n \"success\": true,\n \"status\": \"done\",\n \"message\": \"\",\n \"url\": \"https://assets.json2video.com/clients/bm1pc474m4/renders/2022-08-14-99359.mp4\",\n \"created_at\": \"2022-08-01T10:49:52.924Z\",\n \"ended_at\": \"2022-08-01T10:50:58.142Z\",\n \"duration\": 20.32,\n \"size\": 26551424,\n \"width\": 1920,\n \"height\": 1080\n },\n \"remaining_quota\": {\n \"movies\": 0,\n \"drafts\": 11\n }\n}\n \n \n \n The url field provides you a link to download your movie.\n \n ","url":"https://json2video.com/docs/tutorial/getting-started/"},{"date_scraped_timestamp":1714855998995,"host":"json2video.com","page_title":"HTML elements - JSON2Video.com","text":" \n JSON2Video allows you to add graphical elements created with simple HTML and CSS in your scenes and movies.\n If you have minimal HTML skills you can create your own screen graphics and customize them to your needs.\n \n \n JSON2Video supports full HTML5 and CSS3 specifications, \n and you can even use Tailwind CSS in your \n HTML snippets.\n \n \n Check the HTML Element schema in the API documentation.\n \n Simple HTML snippet\n \n This first example creates a HTML Element with a simple ordered list (<ol>) and defines CSS styles for the <li> and <p>\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"html\",\n \"html\": \"<p style=\\\"margin-bottom:2em\\\">What is <em>Lorem ipsum</em>?:</p><ol><li>It's simply dummy text of the printing and typesetting industry</li><li>It has been the industry's standard dummy text ever since the 1500s</li><li>It was popularised in the 1960s with the release of Letraset sheets</li></ol>\",\n \"settings\": {\n \"font-size\": \"25px\"\n },\n \"x\": 960,\n \"width\": 800,\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n \n You can use the settings property to define default CSS settings for the HTML snippet.\n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n Make sure your HTML snippet code is properly escaped for double quotes (\\\") to make it JSON compatible.\n \n Tailwind CSS component\n \n In this example we are inserting a TailwindCSS component over a video background. Using TailwindCSS components in your videos can be a very useful and effective\n way if you have some HTML skills.\n \n \n \n To showcase this feature we chose the \"User With Details\" card from Meraki UI:.\n \n \n \n The movie script uses one scene with a Video Element and a HTML Element. The HTML Element sets tailwindcss: true and\n includes the TailwindCSS HTML snippet in the html property. The HTML Element appears at second 2 for 12 seconds, with a\n fade-in and fade-out effect of 1 second.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/stars-01.mp4\"\n },\n {\n \"type\": \"html\",\n \"html\": \"<div class=\\\"max-w-sm mx-auto overflow-hidden bg-white rounded-lg shadow-lg dark:bg-gray-800\\\"> <img class=\\\"object-cover object-center w-full h-56\\\" src=\\\"https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=334&q=80\\\" alt=\\\"avatar\\\"> <div class=\\\"flex items-center px-6 py-3 bg-gray-900\\\"> <svg class=\\\"w-6 h-6 text-white fill-current\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M17 21C15.8954 21 15 20.1046 15 19V15C15 13.8954 15.8954 13 17 13H19V12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12V13H7C8.10457 13 9 13.8954 9 15V19C9 20.1046 8.10457 21 7 21H3V12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12V21H17ZM19 15H17V19H19V15ZM7 15H5V19H7V15Z\\\"/> </svg> <h1 class=\\\"mx-3 text-lg font-semibold text-white\\\">Focusing</h1> </div> <div class=\\\"px-6 py-4\\\"> <h1 class=\\\"text-xl font-semibold text-gray-800 dark:text-white\\\">Patterson johnson</h1> <p class=\\\"py-2 text-gray-700 dark:text-gray-400\\\">Full Stack maker & UI / UX Designer , love hip hop music Author of Building UI.</p> <div class=\\\"flex items-center mt-4 text-gray-700 dark:text-gray-200\\\"> <svg class=\\\"w-6 h-6 fill-current\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path d=\\\"M14 11H10V13H14V11Z\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M7 5V4C7 2.89545 7.89539 2 9 2H15C16.1046 2 17 2.89545 17 4V5H20C21.6569 5 23 6.34314 23 8V18C23 19.6569 21.6569 21 20 21H4C2.34314 21 1 19.6569 1 18V8C1 6.34314 2.34314 5 4 5H7ZM9 4H15V5H9V4ZM4 7C3.44775 7 3 7.44769 3 8V14H21V8C21 7.44769 20.5522 7 20 7H4ZM3 18V16H21V18C21 18.5523 20.5522 19 20 19H4C3.44775 19 3 18.5523 3 18Z\\\"/> </svg> <h1 class=\\\"px-2 text-sm\\\">Meraki UI</h1> </div> <div class=\\\"flex items-center mt-4 text-gray-700 dark:text-gray-200\\\"> <svg class=\\\"w-6 h-6 fill-current\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M16.2721 10.2721C16.2721 12.4813 14.4813 14.2721 12.2721 14.2721C10.063 14.2721 8.27214 12.4813 8.27214 10.2721C8.27214 8.063 10.063 6.27214 12.2721 6.27214C14.4813 6.27214 16.2721 8.063 16.2721 10.2721ZM14.2721 10.2721C14.2721 11.3767 13.3767 12.2721 12.2721 12.2721C11.1676 12.2721 10.2721 11.3767 10.2721 10.2721C10.2721 9.16757 11.1676 8.27214 12.2721 8.27214C13.3767 8.27214 14.2721 9.16757 14.2721 10.2721Z\\\"/><path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M5.79417 16.5183C2.19424 13.0909 2.05438 7.3941 5.48178 3.79418C8.90918 0.194258 14.6059 0.0543983 18.2059 3.48179C21.8058 6.90919 21.9457 12.606 18.5183 16.2059L12.3124 22.7241L5.79417 16.5183ZM17.0698 14.8268L12.243 19.8965L7.17324 15.0698C4.3733 12.404 4.26452 7.9732 6.93028 5.17326C9.59603 2.37332 14.0268 2.26454 16.8268 4.93029C19.6267 7.59604 19.7355 12.0269 17.0698 14.8268Z\\\"/> </svg> <h1 class=\\\"px-2 text-sm\\\">California</h1> </div> <div class=\\\"flex items-center mt-4 text-gray-700 dark:text-gray-200\\\"> <svg class=\\\"w-6 h-6 fill-current\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"> <path fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M3.00977 5.83789C3.00977 5.28561 3.45748 4.83789 4.00977 4.83789H20C20.5523 4.83789 21 5.28561 21 5.83789V17.1621C21 18.2667 20.1046 19.1621 19 19.1621H5C3.89543 19.1621 3 18.2667 3 17.1621V6.16211C3 6.11449 3.00333 6.06765 3.00977 6.0218V5.83789ZM5 8.06165V17.1621H19V8.06199L14.1215 12.9405C12.9499 14.1121 11.0504 14.1121 9.87885 12.9405L5 8.06165ZM6.57232 6.80554H17.428L12.7073 11.5263C12.3168 11.9168 11.6836 11.9168 11.2931 11.5263L6.57232 6.80554Z\\\"/> </svg> <h1 class=\\\"px-2 text-sm\\\">patterson@example.com</h1> </div> </div> </div>\",\n \"tailwindcss\": true,\n \"y\": 50,\n \"start\": 2,\n \"duration\": 12,\n \"fade-in\": 1,\n \"fade-out\": 1\n }\n ],\n \"duration\": 15\n }\n ]\n}\n \n \n \n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n ","url":"https://json2video.com/docs/tutorial/html-elements/"},{"date_scraped_timestamp":1714855944977,"host":"json2video.com","page_title":"How to add video elements","text":" \n Video elements are a type of Element that allow you to add a video in a scene or a movie. \n You must specify a URL to the video file (for example, an MP4 file) and the properties that define the behaviour of the video.\n You can read the full schema specification for the video elements in the API documentation.\n \n Simple video\n The following JSON creates a simple movie with one scene and one video.\n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n }\n ]\n }\n ]\n}\n \n \n \n \n This JSON relies on the defaults:\n \n The movie default duration is -1 that means automatic based on the scene duration\n The scene default duration is -1 that means automatic based on the element duration\n The video element default duration is -1 that means automatic based on the asset duration\n The video is positioned at x=0, y=0\n etc...\n \n You can check all defaults in the API Documentation.\n \n The resulting video won't be really interesting as it will be exactly as the original one 😏.\n So, let's do something a little more interesting in the next example.\n \n Concatenating 2 videos\n \n In this example, we will create a movie that concatenates 2 videos.\n We can do it in different ways, for example:\n \n \n Adding the 2 source videos in the same scene, one after the other; or\n Adding 2 scenes, one source video in each scene\n \n Although the result may seem very similar, the second option is recommended as it has some advantages that we will see in the following examples.\n Two videos in the same scene\n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n },\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-02.mp4\",\n \"start\": 11\n }\n ]\n }\n ]\n}\n \n \n \n \n The movie resulting of rendering the previous JSON is:\n \n \n \n Your browser does not support the video tag.\n \n \n \n \n The problem with this approach is that we need to know in advance the length of the first video, \n so we can specify it in the start property of the second video.\n \n \n Another downside is that we can not apply a video transition between the two videos.\n \n Two scenes, one video in each scene\n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n }\n ]\n },\n {\n \"comment\": \"Scene #2\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-02.mp4\"\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The video output of the JSON above is exactly the same than in the example 2.1, but with this approach we \n do not need to know the duration of the first video beforehand because the duration of each scene is the \n calculated duration of all the child elements, and the scenes are chained one after the other.\n \n \n Additionally, using this approach we can take advantage of the scene transitions, something not available for\n the video elements.\n \n Three videos with transitions\n \n In this example, we will create a movie chaining 3 videos and adding transitions between the videos.\n To achieve this, we will use 3 scenes, one video in each, applying different transitions between Scene #1 - Scene #2,\n and between Scene #2 - Scene #3.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n }\n ]\n },\n {\n \"comment\": \"Scene #2\",\n \"transition\": {\n \"style\": \"circleopen\",\n \"duration\": 1.5\n },\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-02.mp4\"\n }\n ]\n },\n {\n \"comment\": \"Scene #3\",\n \"transition\": {\n \"style\": \"fade\",\n \"duration\": 2\n },\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-03.mp4\"\n }\n ]\n }\n ]\n}\n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n Again, by using scenes instead of chaining videos, we don't need to know the length of the source videos. \n \n \n The transition property defines what effect to apply in between the previous and current scene.\n \n \n Video wall\n \n The following example shows how to create a video wall that plays 4 videos side by side. \n To do this, we add the 4 videos in the same scene, scale them down and position them in different coordinates.\n Finally, we trim the scene to 10 seconds, so the movie will also be 10 seconds long.\n \n \n Unlike the other examples, in this case we will generate the movie in high quality using the \n setting \"quality\": \"high\" in the movie object.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"duration\": 10,\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\",\n \"scale\": {\n \"width\": 960,\n \"height\": 540\n }\n },\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-02.mp4\",\n \"scale\": {\n \"width\": 960,\n \"height\": 540\n },\n \"x\": 960\n },\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-03.mp4\",\n \"scale\": {\n \"width\": 960,\n \"height\": 540\n },\n \"y\": 540\n },\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-04.mp4\",\n \"scale\": {\n \"width\": 960,\n \"height\": 540\n },\n \"x\": 960,\n \"y\": 540\n }\n ]\n }\n ]\n}\n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n The scale property allows us to scale down to half the width (1920/2=960) \n and half the height (1080/2=540), \n and the x and y properties move the video element to the correct position.\n \n \n A missing or omitted x or y implies a value of 0.\n \n ","url":"https://json2video.com/docs/tutorial/video-elements/"},{"date_scraped_timestamp":1714855967155,"host":"json2video.com","page_title":"Image elements - JSON2Video.com","text":" \n JSON2Video API allows you to add images to your videos to create overlays, watermarks, backgrounds or slideshows.\n In this section we will provide some examples of using images.\n \n Simple image\n \n Let's create a very simple example with nothing else than a background image. For this, we will\n create a movie, with just one scene, and with an Image Element inside.\n The image is set to a duration of 10 seconds, so the scene and the movie will inherit the \n same duration.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/flower-bee.jpg\",\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n The resulting video is:\n \n \n \n Your browser does not support the video tag.\n \n \n \n \n Simple watermark over video\n \n In this example, we will add a watermark image on the top-right corner over a background video. \n The watermark will appear after 3 seconds and will stay visible for 5 seconds.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n },\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/sunglasses-emoji-small.png\",\n \"start\": 3,\n \"duration\": 5,\n \"x\": 1800,\n \"y\": 20\n }\n ]\n }\n ]\n}\n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n Note that the image is a PNG with transparent background.\n \n Scaled and rotated image\n \n Images can be scaled up and down and can be rotated. The following example\n creates a movie with a background image and a rotating sunglasses emoji\n scaled up to 250x250 pixels.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/flower-bee.jpg\",\n \"duration\": 15\n },\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/sunglasses-emoji-small.png\",\n \"x\": 835,\n \"y\": 575,\n \"scale\": {\n \"width\": 250,\n \"height\": 250\n },\n \"rotate\": {\n \"angle\": 360,\n \"speed\": 1\n }\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The rotate property takes an angle and speed parameters to\n animate the rotation. In the example above, the settings mean \"rotate 360 degrees in 1 second\".\n The rotation continues during all the scene.\n \n \n A speed value of zero means there is no animation and the image is statically rotated.\n \n \n The output of the JSON above is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n Image slideshow\n \n Creating an image slideshow is quite similar to create a video slideshow (Video Elements - Example 3).\n We will use scenes (one image per scene) and transitions between scenes.\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"comment\": \"Scene #1\",\n \"transition\": {\n \"style\": \"circleopen\",\n \"duration\": 1.5\n },\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/london-01.jpg\",\n \"duration\": 10\n }\n ]\n },\n {\n \"comment\": \"Scene #2\",\n \"transition\": {\n \"style\": \"wipeup\",\n \"duration\": 1.5\n },\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/london-02.jpg\",\n \"duration\": 10\n }\n ]\n },\n {\n \"comment\": \"Scene #3\",\n \"transition\": {\n \"style\": \"fade\",\n \"duration\": 1.5\n },\n \"elements\": [\n {\n \"type\": \"image\",\n \"src\": \"https://assets.json2video.com/assets/images/london-03.jpg\",\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n \n The resulting video is:\n \n \n \n \n Your browser does not support the video tag.\n \n \n ","url":"https://json2video.com/docs/tutorial/image-elements/"},{"date_scraped_timestamp":1714855982787,"host":"json2video.com","page_title":"JSON2Video SDKs for PHP, NodeJS, Python, Go, ...","text":" \n JSON2Video provides you with SDKs for the most popular programming languages to make the implementation even easier.\n We currently support PHP and NodeJS, but other SDKs are in the short-term pipeline: Python, Go and other.\n \n \n JSON2Video PHP SDK\n JSON2Video NodeJS SDK\n \n \n SDK basic concepts\n \n \n All our SDKs have common concepts you should understand:\n \n \n \n SDKs are Object-oriented\n There are 2 main classes to use: Movie and Scene\n \n \n Movie class\n Represents the movie JSON schema and allows to define the \n output video properties and the calls to the API (render and getStatus).\n \n \n Scene class\n Represents the scene JSON schema and defines the different scenes\n in the Movie object.\n \n \n Elements are created as JSON objects\n Elements do not have a dedicated class or object.\n Instead, they are created as simple JSON objects.\n \n \n Hyphens become underscores in property names\n Property names in the Movie and Scene schemes that include hyphens (like background-color), the hyphen is always\n translated to underscores (like in $scene->background_color).\n \n \n Steps for creating a video with the SDKs\n 1. Create and setup the Movie object\n \n Create the Movie object\n Set your API key (that will be sent in the x-api-key header)\n Define your desired resolution and quality (optional)\n \n \n \n \n \n PHP\n \n \n NodeJS\n \n \n \n \n \n 2. Create one or more Scenes\n \n Create one or more Scene objects\n Add elements to them with the addElement method\n Add the scenes to the movie with the addScene method\n \n \n \n \n \n PHP\n \n \n NodeJS\n \n \n \n \n \n 3. Send the render request\n \n Post the movie to be rendered with the render method\n \n \n \n \n \n PHP\n \n \n NodeJS\n \n \n \n \n \n \n 4. Check the render status\n \n Check the status of your rendering job calling the getStatus method every few seconds\n \n \n \n \n \n PHP\n \n \n NodeJS\n \n \n \n \n \n ","url":"https://json2video.com/docs/sdk/"},{"date_scraped_timestamp":1714855981368,"host":"json2video.com","page_title":"Jumping letters style","text":"\n Component packs\nJumping letters style Demo:\n \n \n 005 style schema\n \n This is a simplified schema of a 005 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"005\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 005\n \n \n This text style has the following default properties in the settings field:\n \n \n \n Object property\n Default value\n \n \n \n \n \n \n \n text-shadow\n \n \"2px 2px rgba(33,33,33,0.5)\" \n \n \n \n \n Usage examples\n \n Check the following examples of 005:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#1A281F\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"005\",\n \"text\": \"Jumping letters\",\n \"settings\": {\n \"font-size\": \"40px\",\n \"font-family\": \"Anton\"\n },\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#1A281F';\n$scene1->addElement([\n'text',\n'005',\n'Jumping letters',\n\t[\n'40px',\n'Anton'\n\t],\n5\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#1A281F\");\nscene1.addElement([\n\"text\",\n\"005\",\n\"Jumping letters\",\n\t[\n\"40px\",\n\"Anton\"\n\t],\n5\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/005"},{"date_scraped_timestamp":1714855997758,"host":"json2video.com","page_title":"Movie templates","text":" \n Movie templates are useful to store a script in the cloud and reuse it in different movies and they are \n specially helpful combined with the variables.\n \n How movie templates work?\n \n Instead of providing the movie script in the request, you just need to reference to the template id.\n \n \n \n POST https://json2video.com/v2/movies\n \n \n \n {\n \"comment\": \"Template id example\",\n \"template\": \"AEobbDfGDXb9dIlFwqJC\"\n}\n \n \n \n And are specially useful combined with the variables because you can\n customize the template in each render request without changing the JSON script.\n \n \n {\n \"comment\": \"Template id example with variables\",\n \"variables\": {\n \"title\": \"Hello world!\",\n \"bgColor\": \"#4392F1\",\n \"image\": \"https://json2video.com/img/logo.png\"\n },\n \"template\": \"AEobbDfGDXb9dIlFwqJC\"\n}\n \n \n When should you use movie templates\n \n Movie templates are suitable for the following use cases:\n \n \n \n When the videos you are creating are consistent and don't change too much. For example, they have the same\n structure and you are only changing elements like text, images, audio or voice elements.\n \n \n When you are integrating with no code tools like Zapier or Make. In this case, you only need to provide a reference\n to the template and you don't need to provide the JSON script in the request.\n \n \n \n Movie templates are not a choice for the following use cases:\n \n \n \n When the movie structure changes for each render. For example, when you don't know in advance the number of scenes or\n the number of elements in each scene.\n \n \n How to create a movie template?\n \n You can create a movie templates in two ways:\n \n \n \n Using the Visual Editor.\n \n \n Programmatically using the API.\n \n \n \n Creating movie templates with the Editor\n \n Creating a movie template using the Visual Editor is the simplest way.\n Follow these steps:\n \n \n \n Go to the Movie templates screen in JSON2Video dashboard.\n \n \n Click on the Add new template button.\n A new blank template called \"New template\" will be created.\n \n \n Click on the \"New template\" to open the visual editor\n \n \n \n You can rename the template from the top bar of the editor.\n \n \n You can duplicate the template by clicking on the Save template as... option in the menu.\n \n \n ","url":"https://json2video.com/docs/tutorial/templates/"},{"date_scraped_timestamp":1714855985782,"host":"json2video.com","page_title":"One line lower-third component","text":"One line lower-third componentThis component is inpired on the lower-thirds used by CNN for the breaking news Demo:\n \n \n basic/052 component schema\n \n This is a simplified schema of a basic/052 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"basic/052\",\n \"settings\": {\n \"card\": {},\n \"headline\": {},\n \"section\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for basic/052\n \n \n This component accepts the following object items in the settings property:\n \n \n card object\n \n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n headline object\n \n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n text\n \n \"Lorem ipsum dolor sit amet, consectetur adipiscing elit\" \n \n \n \n \n \n \n \n \n \n \n section object\n \n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n Usage examples\n \n Check the following examples of basic/052:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"duration\": 5,\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/052\",\n \"settings\": {\n \"headline\": {\n \"text\": \"Lorem ipsum dolor sit amet\"\n }\n },\n \"cache\": false\n }\n ],\n \"background-color\": \"#4392F1\",\n \"cache\": true\n }\n ]\n}\n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"black\",\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/mars-01.mp4\",\n \"scale\": {\n \"height\": 1080\n }\n },\n {\n \"type\": \"component\",\n \"component\": \"basic/052\",\n \"settings\": {\n \"section\": {\n \"text\": \"SPACE\"\n },\n \"headline\": {\n \"text\": \"25 photos that could change the way you see our universe\"\n }\n }\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/basic/052"},{"date_scraped_timestamp":1714855969876,"host":"json2video.com","page_title":"Page not found","text":"\n Page not found: docs/tutorial/template-elements/ ","url":"https://json2video.com/docs/tutorial/template-elements/"},{"date_scraped_timestamp":1714855962675,"host":"json2video.com","page_title":"Page not found","text":"\n Page not found: docs/api/v2/ ","url":"https://json2video.com/docs/api/v2/"},{"date_scraped_timestamp":1714855979180,"host":"json2video.com","page_title":"Profile image component","text":"\n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/120\",\n \"width\": 320,\n \"x\": 160,\n \"settings\": {\n \"card\": {\n \"color\": \"white\"\n },\n \"image\": {\n \"background-image\": \"url(https://assets.json2video.com/assets/images/man-02.jpg)\",\n \"border-color\": \"#FFF\"\n },\n \"name\": {\n \"text\": \"John Doe\"\n },\n \"title\": {\n \"text\": \"Chief Executive Officer\"\n },\n \"description\": {\n \"text\": \"As is well known, the device of involving real people as notional lessees and ejectors was used to enable freeholders to sue the real ejectors.\"\n }\n },\n \"cache\": false\n }\n ],\n \"duration\": 5\n }\n ]\n}\n \n \n","url":"https://json2video.com/docs/resources/basic/120"},{"date_scraped_timestamp":1714855975696,"host":"json2video.com","page_title":"Revealing letters style","text":"\n Component packs\nRevealing letters style Demo:\n \n \n 006 style schema\n \n This is a simplified schema of a 006 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"006\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 006\n \n \n This text style has the following default properties in the settings field:\n \n \n \n Object property\n Default value\n \n \n \n \n \n \n \n \n text-shadow\n \n \"2px 2px rgba(33,33,33,0.5)\" \n \n \n \n \n Usage examples\n \n Check the following examples of 006:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#8661C1\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"006\",\n \"text\": \"Revealing letters\",\n \"settings\": {\n \"font-size\": \"4vw\",\n \"font-family\": \"PT Sans\"\n },\n \"duration\": 5,\n \"cache\": false\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#8661C1';\n$scene1->addElement([\n'text',\n'006',\n'Revealing letters',\n\t[\n'4vw',\n'PT Sans'\n\t],\n5,\nfalse\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#8661C1\");\nscene1.addElement([\n\"text\",\n\"006\",\n\"Revealing letters\",\n\t[\n\"4vw\",\n\"PT Sans\"\n\t],\n5,\nfalse\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/006"},{"date_scraped_timestamp":1714855999148,"host":"json2video.com","page_title":"Simple card component","text":"Simple card componentUse this simple component to add a text card in your video, including a headline and body paragraphs. It's really flexible and easily customizable with CSS. Demo:\n \n \n basic/000 component schema\n \n This is a simplified schema of a basic/000 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"basic/000\",\n \"settings\": {\n \"card\": {},\n \"headline\": {},\n \"body\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for basic/000\n \n \n This component accepts the following object items in the settings property:\n \n \n card object\n Defines the properties of the card\n \n Check all available object properties here.\n \n \n Object property\n Default value\n \n \n \n headline object\n Defines the properties of the first text line/paragraph\n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n text\n \n \"Lorem ipsum dolor sit amet\" \n \n \n \n \n \n \n \n body object\n Defines the properties of the following text lines/paragraphs. The text property can be an array of strings\n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n text\n \n \"Lorem ipsum dolor sit amet, <em>consectetur adipiscing elit</em>, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\" \n \n \n \n \n \n \n \n Usage examples\n \n Check the following examples of basic/000:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"basic/000\",\n \"settings\": {\n \"headline\": {\n \"text\": \"Lorem ipsum dolor sit amet\",\n \"color\": \"white\"\n },\n \"body\": {\n \"text\": [\n \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n \"Phasellus elit sem, dignissim convallis ligula vitae, venenatis fermentum risus. Suspendisse viverra ut ipsum eget ullamcorper.\"\n ],\n \"color\": \"white\"\n }\n },\n \"width\": 1600,\n \"height\": 760,\n \"x\": 160,\n \"y\": 160,\n \"duration\": 10\n }\n ]\n }\n ]\n}\n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/typing-01.mp4\"\n },\n {\n \"type\": \"component\",\n \"component\": \"basic/000\",\n \"width\": 800,\n \"x\": 960,\n \"y\": 160,\n \"settings\": {\n \"card\": {\n \"background\": \"white\",\n \"border-radius\": \"10px\"\n },\n \"headline\": {\n \"text\": \"Lorem ipsum dolor sit amet\",\n \"color\": \"black\"\n },\n \"body\": {\n \"text\": [\n \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",\n \"Phasellus elit sem, dignissim convallis ligula vitae, venenatis fermentum risus. Suspendisse viverra ut ipsum eget ullamcorper.\"\n ],\n \"color\": \"black\"\n }\n }\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/basic/000"},{"date_scraped_timestamp":1714855998394,"host":"json2video.com","page_title":"Simple rating component","text":"\n Component packs\nSimple rating component Demo:\n \n \n advanced/070 component schema\n \n This is a simplified schema of a advanced/070 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"advanced/070\",\n \"settings\": {\n \"rating\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for advanced/070\n \n \n This component accepts the following object items in the settings property:\n \n \n rating object\n Defines the rating component properties\n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n value\n \n 5Specify an integer number from 0 to 5 \n \n \n symbol\n \n \"star\"Defines what symbol to use. Select star|heart \n \n \n \n \n \n \n off-color\n \n \"transparent\"Color of the non-rated stars or hearts \n \n \n \n \n Usage examples\n \n Check the following examples of advanced/070:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 320,\n \"quality\": \"high\",\n \"draft\": true,\n \"scenes\": [\n {\n \"background-color\": \"#6BAA75\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/070\",\n \"settings\": {\n \"rating\": {\n \"value\": 4,\n \"symbol\": \"star\",\n \"size\": \"12vw\",\n \"off-color\": \"rgba(255,255,255,0.1)\"\n }\n },\n \"start\": 0.5,\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 320;\n$movie->quality = 'high';\n$movie->draft = true;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#6BAA75';\n$scene1->addElement([\n'component',\n'advanced/070',\n\t[\n\t[\n4,\n'star',\n'12vw',\n'rgba(255,255,255,0.1)'\n\t]\n\t],\n0.5,\n5\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 320);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", true);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#6BAA75\");\nscene1.addElement([\n\"component\",\n\"advanced/070\",\n\t[\n\t[\n4,\n\"star\",\n\"12vw\",\n\"rgba(255,255,255,0.1)\"\n\t]\n\t],\n0.5,\n5\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/advanced/070"},{"date_scraped_timestamp":1714855994331,"host":"json2video.com","page_title":"Smart crop image animation component","text":"Smart crop image animation componentShows an animated cropped image that uses smart object detection to crop the important things in the focus Demo:\n \n \n advanced/100 component schema\n \n This is a simplified schema of a advanced/100 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"advanced/100\",\n \"settings\": {\n \"image\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for advanced/100\n \n \n This component accepts the following object items in the settings property:\n \n \n image object\n \n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n src\n \n \"https://assets.json2video.com/assets/images/woman-01.jpg\"URL to the image \n \n \n initial_left\n \n \"0%\"The left position at the start of the animation, in percent relative to the component box, with 0% being the left edge and 100% being the right edge \n \n \n initial_width\n \n \"100%\"Width at the start of the animation, in percentage relative to the component box, where 100% is the full width of the component \n \n \n initial_top\n \n \"0%\"The top position at the beginning of the animation, in percent relative to the component box, with 0% being the top edge and 100% is the bottom edge \n \n \n initial_height\n \n \"100%\"Height at the beginning of the animation, in percentage relative to the component box, where 100% is the full height of the component \n \n \n final_left\n \n \"50%\"The left position at the end of the animation, in percentage relative to the component box, with 0% being the left edge and 100% being the right edge \n \n \n final_width\n \n \"50%\"Width at the end of the animation, in percentage relative to the component box, with 100% being the full width of the component \n \n \n final_top\n \n \"0%\"The top position at the end of the animation, in percentage relative to the component box, where 0% is the top edge and 100% is the bottom edge \n \n \n final_height\n \n \"100%\"Height at the end of the animation, in percentage relative to the component box, with 100% being the full height of the component \n \n \n duration\n \n 1Animation duration in seconds \n \n \n easing\n \n \"easeOutCubic\"Easing to apply to the animation \n \n \n \n \n Usage examples\n \n Check the following examples of advanced/100:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#1A281F\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/100\",\n \"settings\": {\n \"image\": {\n \"src\": \"https://assets.json2video.com/assets/images/woman-01.jpg\",\n \"initial_left\": \"0%\",\n \"initial_width\": \"100%\",\n \"final_left\": \"70%\",\n \"final_width\": \"30%\",\n \"duration\": 2\n }\n },\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/advanced/100"},{"date_scraped_timestamp":1714855971609,"host":"json2video.com","page_title":"Static text style","text":"\n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n },\n {\n \"type\": \"text\",\n \"style\": \"001\",\n \"text\": \"'Lorem ipsum' has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book\",\n \"settings\": {\n \"color\": \"#FFFFFF\",\n \"font-size\": \"60px\",\n \"font-family\": \"Roboto Condensed\",\n \"shadow\": 2,\n \"text-align\": \"left\",\n \"vertical-align\": \"top\"\n },\n \"width\": 960,\n \"x\": 900,\n \"y\": 50\n }\n ]\n }\n ]\n}\n \n \n","url":"https://json2video.com/docs/resources/text/001/"},{"date_scraped_timestamp":1714856003922,"host":"json2video.com","page_title":"Static text style","text":"\n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/beach-01.mp4\"\n },\n {\n \"type\": \"text\",\n \"style\": \"001\",\n \"text\": \"'Lorem ipsum' has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book\",\n \"settings\": {\n \"color\": \"#FFFFFF\",\n \"font-size\": \"60px\",\n \"font-family\": \"Roboto Condensed\",\n \"shadow\": 2,\n \"text-align\": \"left\",\n \"vertical-align\": \"top\"\n },\n \"width\": 960,\n \"x\": 900,\n \"y\": 50\n }\n ]\n }\n ]\n}\n \n \n","url":"https://json2video.com/docs/resources/text/001"},{"date_scraped_timestamp":1714855962457,"host":"json2video.com","page_title":"Subtitle elements","text":" \n JSON2Video uses OpenAI's Whisper to transcribe the audio and generate subtitles for you, supporting a wide variety of languages and accents.\n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n See more examples\n \n The subtitle element\n \n The subtitle element is a bit different from the other elements.\n It's processed always once the scene or the movie is rendered to make sure it captures and transcribes the audio correctly.\n \n \n You can add a subtitle element to any scene or movie:\n \n \n \n In case you add it to a scene, the subtitles will be created for the scene only, and other scenes in the movie may not have subtitles.\n \n \n In case you add it to a movie, the subtitles will be created for the full movie.\n \n \n If you add the subtitle element to a scene and to the movie at the same time, the subtitles will be overlapped on top of each other, so try to avoid this.\n \n \n \n The subtitle element has the following format:\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"language\": \"en\",\n \"settings\": {}\n}\n \n \n \n \n language\n \n The language property defines the expected language of the voice-over. It defaults to \"en\" (English).\n Other posible values are:\n \n \n es: Spanish\n fr: French\n de: German\n it: Italian\n ja: Japanese\n ko: Korean\n ca: Catalan\n pt-BR: Brazilian Portuguese\n \n \n Check the supported languages in the API specification.\n \n Settings object\n \n The settings object allows you to customize the style of the subtitles using the following properties:\n \n style\n \n The style of the subtitle element. Styles are like presets of settings to start with that you can customize further using the settings object.\n \n \n The default style is classic. These are the available styles:\n \n font-family\n \n Sets the font family of the subtitle text. There is a short list of fonts to choose from:\n \n \n Arial\n Libre Baskerville\n Lobster\n Luckiest Guy\n Nanum Pen Script\n Nunito\n Pacifico\n Roboto\n \n \n If you need any additional fonts, please let us know.\n \n font-size\n \n Sets the font size of the subtitle text. Defaults to a 10% of the video resolution.\n \n max-words-per-line\n \n Sets the maximum number of words per line. Defaults to 4. If you set it to 1, the subtitle will display just one word at once.\n \n position\n \n Sets the subtitle position on the video. Defaults to bottom-center.\n \n word-color, line-color\n \n Sets the color of the subtitle text. The word-color refers to the color of the word that is being spoken and \n the line-color refers to the rest of the text.\n Setting different values to word-color and line-color makes the spoken word to be highlighted.\n Setting these properties to the same value makes the whole line of text to look the same color.\n \n \n Colors can be set in hexadecimal format like #00B140, but can also include alpha (opacity) values, like #00B14008.\n \n outline-width, outline-color\n \n Some styles support an outline (classic styles, for example).\n outline-width sets the width of the outline, that can be set to 0 to disable the outline.\n outline-color sets the color of the outline.\n \n box-color\n \n A few styles, instead of outline, support a box around the text. This property sets the color of the box framing the subtitle.\n Again, like all color properties, it must be in hexadecimal format like #00B140, but can also include alpha (opacity) values, like #00B14008.\n \n shadow-color, shadow-offset\n \n Some styles support a shadow. These properties set the color of the shadow, and the offset of the shadow.\n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n See more examples\n \n ","url":"https://json2video.com/docs/tutorial/subtitle-elements/"},{"date_scraped_timestamp":1714855974915,"host":"json2video.com","page_title":"Subtitle examples","text":" \n \n In the following examples we will see how you can use subtitles in your videos with JSON2Video API.\n \n Classic styles\n \n The classic style and its variant classic-progressive,\n are simple subtitles.\n \n \n You can customize the substitles with an outline around the text and a shadow.\n You can also define different colors for the current spoken word and the rest of the text,\n making it simple to highlight the word that is being spoken.\n \n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"settings\": {\n \"style\": \"classic\",\n \"outline-color\": \"#000000\",\n \"outline-width\": 5\n }\n}\n \n \n \n \n \n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"settings\": {\n \"style\": \"classic\",\n \"box-color\": \"#000000\",\n \"outline-width\": 10,\n \"word-color\": \"#B185A7\",\n \"shadow-offset\": 0,\n \"shadow-color\": \"#000000\",\n \"max-words-per-line\": 4,\n \"font-size\": 280,\n \"font-family\": \"Luckiest Guy\",\n \"position\": \"center-center\",\n \"outline-color\": \"#000000\",\n \"line-color\": \"#FFF4E9\"\n }\n}\n \n \n \n \n \n The following uses classic-progressive, that shows the words as they are being spoken and hides those that are not.\n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"settings\": {\n \"style\": \"classic-progressive\",\n \"outline-color\": \"#000000\",\n \"font-family\": \"Libre Baskerville\",\n \"position\": \"bottom-left\",\n \"font-size\": 200,\n \"line-color\": \"#faedcd\",\n \"word-color\": \"#faedcd\",\n \"shadow-color\": \"#d4a373\",\n \"shadow-offset\": 5,\n \"max-words-per-line\": 3,\n \"outline-width\": 3\n }\n}\n \n \n \n \n \n \n The following example uses the classic style with max-words-per-line set to 1.\n This creates the effect that only the word that is being spoken is shown.\n \n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"settings\": {\n \"style\": \"classic\",\n \"outline-color\": \"#000000\",\n \"font-family\": \"Roboto\",\n \"position\": \"bottom-center\",\n \"font-size\": 400,\n \"line-color\": \"#faedcd\",\n \"word-color\": \"#faedcd\",\n \"shadow-offset\": 10,\n \"max-words-per-line\": 1,\n \"outline-width\": 5\n }\n}\n \n \n \n \n \n Boxed styles\n \n There are 2 types of boxed styles: boxed-line and boxed-word.\n \n \n The boxed-line style adds a box around the whole text. \n You can specify the color of the box with the box-color property, that defaults to black.\n \n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"settings\": {\n \"style\": \"boxed-line\",\n \"font-family\": \"Roboto\",\n \"position\": \"bottom-center\",\n \"font-size\": 200,\n \"line-color\": \"#faedcd\",\n \"word-color\": \"#00FF00\",\n \"max-words-per-line\": 3\n }\n}\n \n \n \n \n \n \n The boxed-word style adds a box around the spoken word.\n Again, box-color defines the color of the box.\n \n \n \n \n \n \n \n \n Your browser does not support the video tag.\n \n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n {\n \"type\": \"subtitles\",\n \"settings\": {\n \"style\": \"boxed-word\",\n \"font-family\": \"Luckiest Guy\",\n \"position\": \"bottom-center\",\n \"font-size\": 200,\n \"line-color\": \"#00FF00\",\n \"word-color\": \"#FFFF00\",\n \"max-words-per-line\": 3,\n \"outline-color\": \"#000000\",\n \"outline-width\": 8\n }\n}\n \n \n \n \n \n ","url":"https://json2video.com/docs/tutorial/subtitle-elements/examples.html"},{"date_scraped_timestamp":1714855991231,"host":"json2video.com","page_title":"Text block style","text":"\n Component packs\nText block style Demo:\n \n \n 011 style schema\n \n This is a simplified schema of a 011 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"011\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 011\n \n \n This text style has the following default properties in the settings field:\n \n \n Object property\n Default value\n \n \n Usage examples\n \n Check the following examples of 011:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#6495ed\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"011\",\n \"text\": \"The hills are alive with the sound of music with songs they have sung for a thousand years\",\n \"settings\": {\n \"font-size\": \"6vw\",\n \"font-family\": \"Inter\",\n \"font-weight\": \"700\",\n \"text-align\": \"left\"\n },\n \"width\": 450,\n \"x\": 50\n }\n ],\n \"duration\": 5\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#6495ed';\n$scene1->addElement([\n'text',\n'011',\n'The hills are alive with the sound of music with songs they have sung for a thousand years',\n\t[\n'6vw',\n'Inter',\n'700',\n'left'\n\t],\n450,\n50\n]);\n$scene1->duration = 5;\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#6495ed\");\nscene1.addElement([\n\"text\",\n\"011\",\n\"The hills are alive with the sound of music with songs they have sung for a thousand years\",\n\t[\n\"6vw\",\n\"Inter\",\n\"700\",\n\"left\"\n\t],\n450,\n50\n]);\nscene1.set(\"duration\", 5);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/011"},{"date_scraped_timestamp":1714855991466,"host":"json2video.com","page_title":"Text letter by letter style","text":"Text letter by letter style Demo:\n \n \n 004 style schema\n \n This is a simplified schema of a 004 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"004\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 004\n \n \n This text style has the following default properties in the settings field:\n \n \n \n Object property\n Default value\n \n \n \n \n \n \n \n text-shadow\n \n \"2px 2px rgba(33,33,33,0.5)\" \n \n \n \n \n Usage examples\n \n Check the following examples of 004:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#FFC759\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"004\",\n \"text\": \"Show text letter by letter\",\n \"settings\": {\n \"font-size\": \"40px\",\n \"font-family\": \"Roboto Mono\"\n },\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#FFC759';\n$scene1->addElement([\n'text',\n'004',\n'Show text letter by letter',\n\t[\n'40px',\n'Roboto Mono'\n\t],\n5\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#FFC759\");\nscene1.addElement([\n\"text\",\n\"004\",\n\"Show text letter by letter\",\n\t[\n\"40px\",\n\"Roboto Mono\"\n\t],\n5\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/004"},{"date_scraped_timestamp":1714855965723,"host":"json2video.com","page_title":"Text styles","text":"\n Check the available text styles for the text elements. Component packs\n","url":"https://json2video.com/docs/resources/text/"},{"date_scraped_timestamp":1714855973743,"host":"json2video.com","page_title":"Text with fade in style","text":"Text with fade in style Demo:\n \n \n 002 style schema\n \n This is a simplified schema of a 002 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"002\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 002\n \n \n This text style has the following default properties in the settings field:\n \n \n \n Object property\n Default value\n \n \n \n \n \n \n \n text-shadow\n \n \"2px 2px rgba(33,33,33,0.5)\" \n \n \n \n \n Usage examples\n \n Check the following examples of 002:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"__thumbnail\": \"\",\n \"__preview\": \"\",\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#6BAA75\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"002\",\n \"text\": \"Text fade in\",\n \"settings\": {\n \"font-size\": \"80px\",\n \"font-family\": \"Grape Nuts\"\n },\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->__thumbnail = '';\n$movie->__preview = '';\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#6BAA75';\n$scene1->addElement([\n'text',\n'002',\n'Text fade in',\n\t[\n'80px',\n'Grape Nuts'\n\t],\n5\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"__thumbnail\", \"\");\nmovie.set(\"__preview\", \"\");\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#6BAA75\");\nscene1.addElement([\n\"text\",\n\"002\",\n\"Text fade in\",\n\t[\n\"80px\",\n\"Grape Nuts\"\n\t],\n5\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/002"},{"date_scraped_timestamp":1714855977622,"host":"json2video.com","page_title":"Text word by word style","text":"Text word by word style Demo:\n \n \n 003 style schema\n \n This is a simplified schema of a 003 style element:\n \n {\n \"type\": \"text\",\n \"style\": \"003\",\n \"text\": \"\",\n \"settings\": {}\n}\n \n \n \n Check the full specification of the Style schema\n in the API documentation.\n \n Settings property for 003\n \n \n This text style has the following default properties in the settings field:\n \n \n \n Object property\n Default value\n \n \n \n \n \n \n \n text-shadow\n \n \"2px 2px rgba(33,33,33,0.5)\" \n \n \n \n \n Usage examples\n \n Check the following examples of 003:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 640,\n \"height\": 360,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#89608E\",\n \"elements\": [\n {\n \"type\": \"text\",\n \"style\": \"003\",\n \"text\": \"Show text word by word\",\n \"settings\": {\n \"font-size\": \"5.5vw\"\n },\n \"duration\": 5\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 640;\n$movie->height = 360;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#89608E';\n$scene1->addElement([\n'text',\n'003',\n'Show text word by word',\n\t[\n'5.5vw'\n\t],\n5\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 640);\nmovie.set(\"height\", 360);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#89608E\");\nscene1.addElement([\n\"text\",\n\"003\",\n\"Show text word by word\",\n\t[\n\"5.5vw\"\n\t],\n5\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/text/003"},{"date_scraped_timestamp":1714855955225,"host":"json2video.com","page_title":"Tutorial","text":"\n Documentation JSON2Video API Tutorial Learn from all the examples \n \n Welcome to the JSON2Video tutorial!\n \n \n In this tutorial, you will learn how to use JSON2Video going through all the\n features, explanations and simple examples.\n \n \n Although it's not required, it's recommended to follow the suggested order.\n \n \n First thing you need is a JSON2Video user account and an API key:\n \n \n \n What you will learn?\n \n \n You should start reading the Getting started section.\n There you will learn the basics of JSON2Video:\n \n \n How to authenticate your calls to the API\n What is a movie and its structure\n What are the scenes and elements\n How to position elements in the video\n How the different elements overlay\n How to use the cache to optimise the video rendering\n \n \n After getting started, you can go through all the types of elements \n JSON2Video offers to create your videos.\n \n \n Video elements\n Image elements\n Text elements\n Template elements\n HTML elements\n Audio elements\n Voice elements\n \n \n ","url":"https://json2video.com/docs/tutorial/"},{"date_scraped_timestamp":1714856004471,"host":"json2video.com","page_title":"Variables","text":" \n You can define variables at the root of the movie template and use them in your scenes and elements.\n \n \n Using variables have the following benefits:\n \n \n \n You can keep the template clean and readable without including the data in the template itself.\n \n \n You can use the same variable in multiple places in the template. This means that if you are\n using the same value in different places, you can just reference to a variable and update the value just once.\n \n \n If you are integrating with no-code tools (like Zapier or Make) it's easier to update variables instead of\n updating the template itself.\n \n \n Simple example\n \n Let's see a simple example of using variables in a dummy template:\n \n \n {\n\t\"comment\": \"Variables example\",\n\t\"resolution\": \"full-hd\",\n \"variables\": {\n \"message\": \"Hello world\",\n \"bgColor\": \"#4392F1\"\n },\n\t\"scenes\": [\n\t{\n\t\"background-color\": \"{{bgColor}}\",\n\t\"elements\": [\n\t{\n\t\"type\": \"text\",\n\t\"style\": \"005\",\n\t\"text\": \"{{message}}\",\n\t\"duration\": 10\n\t}\n\t]\n\t}\n\t]\n}\n \n \n \n The variables property of the movie template is an object containing the variables you want to use in the template.\n In this example, we defined 2 variables: message and bgColor.\n \n \n The message variable will be used in the text element, and the bgColor variable will be used in the background-color property of the scene.\n \n \n Variables can have values of type string, number.\n \n \n Multiple replacements\n \n You can also use the same variable in multiple places in the template, like in the following example:\n \n \n {\n \"comment\": \"Variables example 2\",\n \"width\": 1920,\n \"height\": 1080,\n \"variables\": {\n \"myImage\": \"https://assets.json2video.com/assets/images/real-estate/house-seattle/house-seattle-01.jpeg\"\n },\n \"scenes\": [\n {\n \"comment\": \"Scene 1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"shape/rectangle\",\n \"settings\": {\n \"rectangle1\": {\n \"left\": \"-30%\",\n \"top\": \"20%\",\n \"width\": \"30vw\",\n \"height\": \"30vw\",\n \"animate\": {\n \"duration\": \"1500\",\n \"easing\": \"easeOutCubic\",\n \"left\": \"15%\"\n },\n \"background-size\": \"cover\",\n \"background-image\": \"url('{{myImage}}')\",\n \"background-position\": \"center\",\n \"border-width\": \"1vw\",\n \"border-style\": \"solid\",\n \"border-color\": \"white\",\n \"border-radius\": \"0.5vw\"\n },\n \"rectangle2\": {\n \"left\": \"100%\",\n \"top\": \"20%\",\n \"width\": \"30vw\",\n \"height\": \"30vw\",\n \"animate\": {\n \"duration\": \"1500\",\n \"easing\": \"easeOutCubic\",\n \"left\": \"55%\"\n },\n \"background-size\": \"cover\",\n \"background-image\": \"url('{{myImage}}')\",\n \"background-position\": \"center\",\n \"border-width\": \"1vw\",\n \"border-style\": \"solid\",\n \"border-color\": \"white\",\n \"border-radius\": \"0.5vw\"\n }\n },\n \"comment\": \"Two images moving horizontally\"\n }\n ],\n \"duration\": 5\n }\n ]\n}\n \n \n \n Resulting video:\n \n \n \n \n Your browser does not support the video tag.\n \n \n \n In this example we use the myImage variable in two places in the template.\n The first one is in the rectangle1 item, and the second one in the rectangle2 item.\n \n \n In this example we also use the variable as part of the background-image property, as a macro:\n \n \n {\n \"background-image\": \"url('{{myImage}}')\"\n}\n \n \n Nested variables\n \n You can also use variables inside other variables, like in the following example:\n \n \n {\n \"variables\": {\n \"myMessage\": \"Hello world!\",\n \"myFinalMessage\": \"I say: {{myMessage}}\"\n }\n}\n \n \n \n In this example, the myMessage variable is used in the myFinalMessage variable, \n and the final value of the myFinalMessage variable is I say: Hello world!.\n \n \n The variables replacement happens in the order of the variables object.\n So you can use variables inside other variables only if they are previously defined in the variables object.\n \n \n ","url":"https://json2video.com/docs/tutorial/variables/"},{"date_scraped_timestamp":1714855947658,"host":"json2video.com","page_title":"Webhooks","text":"\n \n You can also use exports and destinations to define a call to a webhook on your end and get notified when the rendering process is complete\n or the exports finished.\n \n \n The webhook destination object has the following required properties:\n \n \n type: webhook\n endpoint: the URL of the webhook\n \n \n And one optional property:\n \n \n content-type: json | urlencoded\n \n \n The default content-type is json.\n \n \n Example:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [\n {\n \"destinations\": [\n {\n \"type\": \"webhook\",\n \"endpoint\": \"https://domain.com/webhook\"\n }\n ]\n }\n ]\n}\n \n \n \n The webhooks are always a POST requests, and depending of the content-type you will\n receive a JSON payload or form encoded variables.\n \n \n The webhook payload includes the following video properties: width, height, duration,\n size in bytes, and url to the video hosted by JSON2Video.\n \n \n Example of a JSON payload:\n \n \n {\n \"width\": \"1920\",\n \"height\": \"1080\",\n \"duration\": \"10\",\n \"size\": \"35870\",\n \"url\": \"https://assets.json2video.com/clients/bm1pc474z4/renders/2023-03-25-73376.mp4\",\n \"project\": \"4GpXmec1aEttCLTF\",\n \"id\": \"this-is-my-id\"\n}\n \n \n \n The id property is populated with the value of the id property of the movie object.\n If you include an id when submitting a movie object, you will receive it in the webhook payload.\n You can use this to id to identify what is coming back.\n \n Webhooks in the dashboard\n \n Webhooks can also be defined as Connections in the dashboard and referenced by the connection id property.\n \n \n Do not confuse the connection id with the id property of the movie object.\n The connection id identifies the connection in the dashboard and it's used to refer to a connection defined in the dashboard.\n The id property of the movie object is used to identify a movie you submitted to render.\n \n Using multiple destinations\n \n As destinations are executed sequentially, if you add a webhook destination after\n the ftp destination, the webhook will be executed after and you will get\n a notification when the upload process is complete.\n \n \n Example:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [],\n \"exports\": [\n {\n \"destinations\": [\n {\n \"id\": \"test-ftp\",\n \"file\": \"__hh__-__nn__-__random__.mp4\"\n },\n {\n \"type\": \"webhook\",\n \"endpoint\": \"https://domain.com/webhook\"\n }\n ]\n }\n ]\n}\n \n \n \n The webhook at https://domain.com/webhook will be called once the FTP upload process is complete.\n \n How to create the webhook endpoint\n \n It's on your side to create the webhook endpoint that will be called by JSON2Video.\n The endpoint MUST BE HOSTED PUBLICLY on your server and have a valid SSL certificate.\n \n \n You can write your endpoint in any programming language you want. \n Here are some examples in PHP and NodeJS\n \n PHP Endpoint\n To set up a webhook endpoint in PHP for JSON2Video, follow these steps:\n \n Create a PHP file: Start by creating a new PHP file (e.g., webhook.php) in your server environment.\n Retrieve JSON Payload: Use file_get_contents(\"php://input\") to retrieve the JSON payload sent by JSON2Video through the POST request.\n Decode JSON Data: Decode the JSON payload using json_decode($jsonPayload, true) to access the video metadata and download URL.\n Custom Processing Logic: Implement your custom processing logic for handling the video metadata and download URL.\n Send Response (Optional): If needed, send an HTTP response back to JSON2Video. Use http_response_code(200) to indicate a successful webhook receipt.\n \n The following is an example of a PHP endpoint:\n \n \n// Retrieve JSON payload from the POST request\n$jsonPayload = file_get_contents(\"php://input\");\n// Decode JSON data\n$data = json_decode($jsonPayload, true);\n// Handle video metadata and download URL\n$videoMetadata = $data[\"metadata\"];\n$downloadURL = $data[\"download_url\"];\n// Your custom processing logic here\n// Send a response if needed\nhttp_response_code(200);\necho \"Webhook received successfully!\";\n \n \n Node.js Endpoint\n To create a webhook endpoint in Node.js for JSON2Video, follow these steps:\n \n Install Dependencies: If you haven't already, install the necessary dependencies by running npm install express body-parser in your project directory.\n Create a Node.js File: Create a new Node.js file (e.g., webhook.js) in your project directory.\n Set Up Express Server: Use the Express framework to set up a server. Define the route (/webhook) where JSON2Video will send the POST requests.\n Parse JSON Payload: Utilize the body-parser middleware to parse JSON payloads in the request body.\n Handle Webhook Logic: Implement your custom logic inside the /webhook route to process the video metadata and download URL.\n Send Response (Optional): If required, send an HTTP response back to JSON2Video using res.status(200).send('Webhook received successfully!').\n \n The following is an example of a Node.js endpoint:\n \n \nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst app = express();\nconst port = 3000; // Choose your preferred port\n// Middleware to parse JSON payloads\napp.use(bodyParser.json());\n// Define the webhook endpoint\napp.post(\"/webhook\", (req, res) => {\n // Retrieve video metadata and download URL from the request body\n const { metadata, download_url } = req.body;\n // Your custom processing logic here\n // Send a response if needed\n res.status(200).send(\"Webhook received successfully!\");\n});\n// Start the server\napp.listen(port, () => {\n console.log(`Server running at http://localhost:${port}/webhook`);\n});\n \n \n Notes:\n \n Ensure the PHP or Node.js server is publicly accessible and has a valid SSL certificate for secure communication.\n Replace the placeholder logic in the examples with your specific video processing requirements.\n Test your webhook endpoint thoroughly to ensure proper integration with JSON2Video.\n \n ","url":"https://json2video.com/docs/tutorial/webhooks/"},{"date_scraped_timestamp":1714855948533,"host":"json2video.com","page_title":"YouTube video automation","text":" Publishing a video to YouTube programmatically\n \n In today's digital age, video content has become an increasingly popular medium for communication, \n marketing, and entertainment. However, creating and publishing videos manually can be a \n time-consuming and repetitive task. \n Fortunately, with the advancements in APIs and video automation tools, \n it is now possible to streamline the video publication process.\n \n \n In this tutorial, we will explore how to automate the publication of videos created with the \n JSON2Video video editing API to YouTube by simply sending an email to Zapier.\n \n About JSON2Video\n \n The JSON2Video API is a versatile video editing API that generates videos dynamically using JSON data and predefined templates. It offers a programmable interface to define video content, layout, and style. With this API, we can automate video creation for personalized marketing campaigns or data-driven visualizations.\n \n \n About Zapier and Zaps\n \n Zapier is an integration platform that automates workflows between web applications. It provides pre-built integrations called \"Zaps\" that connect different services. In this tutorial, we'll use Zapier's email-triggered Zaps to connect the JSON2Video API with YouTube for automatic video publication.\n \n \n Setting up the JSON2Video part is very easy, as you just add some code to the exports property of the movie object.\n \n But setting up Zapier and connecting it to YouTube is a little bit tricky.\n \n Follow the steps below.\n \n Setting up the Environment\n \n Before we dive into automating video publication, it's essential to ensure that we have all the necessary tools and accounts in place. Make sure you have the following:\n \n \n JSON2Video API credentials: Sign up for a free JSON2Video API account here and get your API key.\n Zapier account: Sign up for a Zapier account. Zapier offers both free and paid plans with varying features and usage limits.\n YouTube account: Sign up for a YouTube account if you don't have one already, and create a channel for your tests\n \n Preparing Zapier to receive emails\n \n Zapier provides a wide range of triggers to initiate workflows, and one of the most versatile options is the email trigger. With an email trigger, we can set up a Zap that activates whenever an email is received at a specified address.\n \n \n In our case, we'll use the email trigger to start the video publication process when the API sends an email containing the necessary information to Zapier.\n \n 1. Enable the Email Parser integration in Zapier\n \n To use the email trigger in Zapier, you first need to enable the Email Parser integration in your Zapier account.\n \n Follow these steps:\n \n Go to Email Parser by Zapier page\n Click on the Log in button\n Log in with your Zapier account\n \n Connect Parser to your Zapier account (click Authorize button)\n \n \n \n 2. Create a Zapier mailbox\n \n Once you enabled the Email Parser integration, you will be redirected to \n the Mailboxes page.\n \n \n Click on the Create Mailbox button\n A new random email address with @robot.zapier.com will be created\n Click on \"Skip waiting\"\n You will land in the mailbox configuration form\n Fill it out like this:\n \n \n The Initial Template defines the structure of the email message Zapier is expecting to receive.\n Zapier will capture the {{video_title}}, {{video_description}}, \n and {{video_url}} in the emails and convert them into key-value pairs that you can use later.\n \n \n We recommend using EOF (or any other string) at the end of the template to help Zapier \n to identify the end of the message. EOF stands from End Of File.\n \n 3. Train Zapier to receive emails\n \n Now that we have a mailbox, it's time to train Zapier to receive emails from the JSON2Video API.\n To do this, send a regular email (with Gmail or your email client) to your recently created Zapier email address with the following content:\n \n \n Replace gwjsu35t@robot.zapier.com with your Zapier email address.\n \n \n Let's check how Zapier understands the email content:\n \n \n Go to Mailboxes in the Zapier dashboard\n Click on \"View Emails\" for your email address\n \n \n You should see something similar to this:\n \n \n Zapier highlights in yellow the email content that it understands.\n We will use the video_title, video_description, and video_url as key-value pairs in\n following steps.\n \n \n Connecting your YouTube account to Zapier\n \n The next step is to connect your YouTube account to Zapier, authorising Zapier to publish videos to your channel.\n \n \n \n Go to My Apps\n page in the Zapier dashboard and click the \"Add connection\" button on the top-right side of the page.\n \n \n From the popup screen, search for \"YouTube\" and click on it.\n \n \n This will open a new floating window where you can select your Google account to use, or in case \n you are not logged in, you can log in to Google.\n \n \n \n Once you are logged in, click on the Allow button\n \n \n \n Now Zapier has access to your YouTube account and it can upload videos to your channel.\n \n Create a Zap to upload videos to YouTube\n \n We are now ready to create a Zap to upload videos to YouTube when Zapier receives an email.\n Go to the Zaps \n page in the Zapier dashboard and\n click on the \"Create new Zap\" button at the top-right side of the page\n \n Configuring the Zap trigger\n \n As a trigger, select \"Email Parser by Zapier\"\n \n As event, select \"New email\"\n As account, choose your Email Parser account\n Next, choose the mailbox you created previously\n Click on \"Continue\" button\n Click on \"Test\" button, and Zapier will use the email message we sent previously to test the trigger\n If the test was successful, click on \"Continue\"\n \n Configuring the Zap action\n \n As action, select \"YouTube\"\n Choose the \"Upload Video\" event\n Click on \"Continue\" button\n Select the YouTube account you set up previously\n Click on \"Continue\" button\n Setup the \"Action\" choosing the parsed email content for the Title, Description and Video fields\n \n Click on \"Continue\" button\n If you used a valid video URL, click on \"Test action\", if not, click on \"Skip test\"\n Finally, click on \"Publish\" to enable your Zap\n \n \n Send an email to Zapier once the video is rendered\n \n Now, we will setup the JSON2Video API to send an email to Zapier once the video is rendered.\n To achieve this, we will use the exports feature like this:\n \n \n {\n \"resolution\": \"full-hd\",\n \"quality\": \"high\",\n \"scenes\": [...],\n \"exports\": [{\n \"destinations\": [{\n \"type\": \"email\",\n \"to\": \"gwjsu35t@robot.zapier.com\",\n \"subject\": \"New video from JSON2Video: __filename__\",\n \"message\": \"Video title: __filename__<br>Video description: My video description<br>Video URL: __video_url__<br>EOF\",\n }]\n }]\n}\n \n \n \n Please note that in the message property we are composing the email content following the\n same format that we used in our training email to Zapier, including the final EOF particle at the end of the message.\n \n \n We are using <br> to insert a line break because the email is sent in HTML format.\n \n \n We are using __video_url__ to dynamically insert the video URL in the message.\n \n \n If you are using the PHP SDK or Node JS SDK, make sure you update to the latest version (v2.0.2 or newer).\n \n Final recap\n \n Creating an automated YouTube channel opens up a world of possibilities across various domains. \n From content creators and influencers to businesses, educational institutions, news organizations, \n and nonprofits, the automation of YouTube channels brings efficiency, scalability, \n and enhanced audience engagement. \n \n \n By leveraging automation, you can maximize your impact, establish a strong online presence, \n and efficiently manage your YouTube content strategy. \n Consider the use cases discussed in this article and adapt the automation principles to your \n specific needs to unlock the full potential of an automated YouTube channel.\n \n \n This is a quite long tutorial because the Zapier configuration is quite complex.\n Hopefully you didn't get lost, and if you did, please let us know and send us a message.\n \n \n If you are a JSON2Video client we can support you in the implementation of your automated solution.\n Please, get in contact with us.\n \n ","url":"https://json2video.com/docs/tutorial/exports/youtube/"},{"date_scraped_timestamp":1714856005283,"host":"json2video.com","page_title":"Zoom-in text animation component","text":"Zoom-in text animation componentUse this text animation component to show text that zooms in. Demo:\n \n \n advanced/000 component schema\n \n This is a simplified schema of a advanced/000 component element:\n \n {\n \"type\": \"component\",\n \"component\": \"advanced/000\",\n \"settings\": {\n \"animation\": {}\n }\n}\n \n \n \n Check the full specification of the Component schema\n in the API documentation.\n \n Settings property for advanced/000\n \n \n This component accepts the following object items in the settings property:\n \n \n animation object\n Defines the animation properties\n \n Check all available object properties here.\n \n \n \n Object property\n Default value\n \n \n text\n \n \"Zoom-out text\"It can be an array of strings \n \n \n \n \n \n \n \n \n Usage examples\n \n Check the following examples of advanced/000:\n \n Example 1\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 1920,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"background-color\": \"#4392F1\",\n \"elements\": [\n {\n \"type\": \"component\",\n \"component\": \"advanced/000\",\n \"settings\": {\n \"animation\": {\n \"text\": [\n \"Ready\",\n \"Steady\",\n \"Go!\"\n ],\n \"font-size\": \"8vw\"\n }\n },\n \"duration\": 7\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 1920;\n$movie->height = 1080;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->background-color = '#4392F1';\n$scene1->addElement([\n'component',\n'advanced/000',\n\t[\n\t[\n\t[\n'Ready',\n'Steady',\n'Go!'\n\t],\n'8vw'\n\t]\n\t],\n7\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 1920);\nmovie.set(\"height\", 1080);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.set(\"background-color\", \"#4392F1\");\nscene1.addElement([\n\"component\",\n\"advanced/000\",\n\t[\n\t[\n\t[\n\"Ready\",\n\"Steady\",\n\"Go!\"\n\t],\n\"8vw\"\n\t]\n\t],\n7\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n Example 2\n \n \n \n \n \n JSON\n \n \n PHP\n \n \n NodeJS\n \n \n \n \n {\n \"width\": 1920,\n \"height\": 1080,\n \"quality\": \"high\",\n \"draft\": false,\n \"scenes\": [\n {\n \"elements\": [\n {\n \"type\": \"video\",\n \"src\": \"https://assets.json2video.com/assets/videos/city-01.mp4\",\n \"scale\": {\n \"width\": 1920\n }\n },\n {\n \"type\": \"component\",\n \"component\": \"advanced/000\",\n \"settings\": {\n \"animation\": {\n \"text\": [\n \"LIKE\",\n \"COMMENT\",\n \"SHARE\"\n ],\n \"font-face\": \"Inter\",\n \"font-weight\": \"700\",\n \"font-size\": \"8vw\",\n \"color\": \"transparent\",\n \"text-stroke\": \"5px white\"\n }\n }\n }\n ]\n }\n ]\n}\n \n \n \n require 'vendor/autoload.php';\nuse JSON2Video\\Movie;\nuse JSON2Video\\Scene;\n// Create and initialize the movie object\n$movie = new Movie;\n$movie->setAPIKey(YOUR_API_KEY);\n$movie->width = 1920;\n$movie->height = 1080;\n$movie->quality = 'high';\n$movie->draft = false;\n// Create the scenes of the movie\n// Create SCENE 1\n$scene1 = new Scene;\n$scene1->addElement([\n'video',\n'https://assets.json2video.com/assets/videos/city-01.mp4',\n\t[\n1920\n\t]\n]);\n$scene1->addElement([\n'component',\n'advanced/000',\n\t[\n\t[\n\t[\n'LIKE',\n'COMMENT',\n'SHARE'\n\t],\n'Inter',\n'700',\n'8vw',\n'transparent',\n'5px white'\n\t]\n\t]\n]);\n$movie->addScene($scene1);\n// Finally, render the movie\n$movie->render();\n// Wait for the movie to be rendered\n$movie->waitToFinish();\n \n \n \n let movie = new Movie;\nmovie.setAPIKey(YOUR_API_KEY);\nmovie.set(\"width\", 1920);\nmovie.set(\"height\", 1080);\nmovie.set(\"quality\", \"high\");\nmovie.set(\"draft\", false);\n// Create the scenes of the movie\n// Create SCENE 1\nlet scene1 = new Scene;\nscene1.addElement([\n\"video\",\n\"https://assets.json2video.com/assets/videos/city-01.mp4\",\n\t[\n1920\n\t]\n]);\nscene1.addElement([\n\"component\",\n\"advanced/000\",\n\t[\n\t[\n\t[\n\"LIKE\",\n\"COMMENT\",\n\"SHARE\"\n\t],\n\"Inter\",\n\"700\",\n\"8vw\",\n\"transparent\",\n\"5px white\"\n\t]\n\t]\n]);\nmovie.addScene(scene1);\n// Finally, render the movie\nmovie.render();\n// Wait for the movie to be rendered\nmovie.waitToFinish();\n \n \n \n \n \n \n ","url":"https://json2video.com/docs/resources/advanced/000"}]